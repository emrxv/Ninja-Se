{"ast":null,"code":"var _jsxFileName = \"/Users/emresunar/Documents/CS3733/IProj/starter/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './App.css';\nimport ninjase from './ninjase.svg';\nimport Model from './model/Model.js';\nimport { redrawCanvas } from './boundary/Boundary.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // initial instantiation of the Model\n  const [model, setModel] = React.useState(new Model(0)); // only place where Model object is instantiated.\n  const [redraw, forceRedraw] = React.useState(0); // change values to force redraw\n\n  const appRef = React.useRef(null); // Later need to be able to refer to App \n  const canvasRef = React.useRef(null); // Later need to be able to refer to Canvas\n\n  /** Ensures initial rendering is performed, and that whenever model changes, it is re-rendered. */\n  React.useEffect(() => {\n    /** Happens once. */\n    redrawCanvas(model, canvasRef.current, appRef.current);\n  }, [model, redraw]); // this second argument is CRITICAL, since it declares when to refresh (whenever Model changes)\n\n  // controller to handle moving\n  const moveNinjaSe = direction => {\n    const ninjaSeSize = 2; // Size of the ninjase block\n\n    // Find the current position of the 2x2 ninjase block\n    let ninjaSePosition = null;\n    for (let r = 0; r < model.board.grid.length; r++) {\n      for (let c = 0; c < model.board.grid[r].length; c++) {\n        if (model.board.grid[r][c].color === 'green') {\n          if (r + 1 < model.board.grid.length && c + 1 < model.board.grid[r].length && model.board.grid[r + 1][c].color === 'green' && model.board.grid[r][c + 1].color === 'green') {\n            ninjaSePosition = {\n              row: r,\n              col: c\n            };\n            break;\n          }\n        }\n      }\n      if (ninjaSePosition) break;\n    }\n    if (!ninjaSePosition) {\n      console.error(\"2x2 ninjase block not found.\");\n      return;\n    }\n\n    // Perform the move based on the direction\n    switch (direction) {\n      case \"Up\":\n        if (ninjaSePosition.row > 0) {\n          // Clear the current 2x2 area\n          for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n            for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n              model.board.grid[r][c].color = 'white'; // Assuming white is the background color\n            }\n          }\n          // Move the 2x2 ninjase block up\n          ninjaSePosition.row--;\n          // Set the new 2x2 area to green\n          for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n            for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n              model.board.grid[r][c].color = 'green';\n            }\n          }\n          forceRedraw(redraw + 1);\n        }\n        break;\n      case \"Right\":\n        // Handle right movement similarly to \"Up\"\n        // (You can implement it in a way similar to \"Up\" but moving to the right)\n        break;\n      case \"Down\":\n        // Handle down movement similarly to \"Up\"\n        // (You can implement it in a way similar to \"Up\" but moving down)\n        break;\n      case \"Left\":\n        // Handle left movement similarly to \"Up\"\n        // (You can implement it in a way similar to \"Up\" but moving to the left)\n        break;\n      default:\n        console.error(\"Invalid direction:\", direction);\n    }\n\n    // model.board.grid[1][3].color = 'red'\n    // forceRedraw(redraw+1)   // react to changes, if model has changed.\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ref: appRef,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      tabIndex: \"1\",\n      \"data-testid\": \"canvas\",\n      className: \"App-canvas\",\n      ref: canvasRef,\n      width: 500,\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"ninjase\",\n      src: ninjase,\n      alt: \"hidden\",\n      hidden: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      \"data-testid\": \"moves-label\",\n      style: layout.text,\n      children: \"number moves: \" + model.numMoves\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: layout.buttons,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"upbutton\",\n        \"data-testid\": \"upbutton\",\n        style: App.upbutton,\n        onClick: e => moveNinjaSe(\"Up\"),\n        children: \"UP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"leftbutton\",\n        \"data-testid\": \"leftbutton\",\n        style: App.leftbutton,\n        onClick: e => moveNinjaSe(\"Left\"),\n        children: \"LEFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"rightbutton\",\n        \"data-testid\": \"rightbutton\",\n        style: App.rightbutton,\n        onClick: e => moveNinjaSe(\"Right\"),\n        children: \"RIGHT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"downbutton\",\n        \"data-testid\": \"downbutton\",\n        style: App.downbutton,\n        onClick: e => moveNinjaSe(\"Down\"),\n        children: \"DOWN\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hjqSLNayM3DeZaL/BO+A2eMkUtY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ninjase","Model","redrawCanvas","jsxDEV","_jsxDEV","App","_s","model","setModel","useState","redraw","forceRedraw","appRef","useRef","canvasRef","useEffect","current","moveNinjaSe","direction","ninjaSeSize","ninjaSePosition","r","board","grid","length","c","color","row","col","console","error","className","ref","children","tabIndex","width","height","fileName","_jsxFileName","lineNumber","columnNumber","id","src","alt","hidden","style","layout","text","numMoves","buttons","upbutton","onClick","e","leftbutton","rightbutton","downbutton","_c","$RefreshReg$"],"sources":["/Users/emresunar/Documents/CS3733/IProj/starter/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\nimport ninjase from './ninjase.svg'\nimport Model from './model/Model.js';\nimport { redrawCanvas } from './boundary/Boundary.js'\n\nfunction App() {\n  // initial instantiation of the Model\n  const [model, setModel] = React.useState(new Model(0));  // only place where Model object is instantiated.\n  const [redraw, forceRedraw] = React.useState(0);    // change values to force redraw\n\n  const appRef = React.useRef(null);      // Later need to be able to refer to App \n  const canvasRef = React.useRef(null);   // Later need to be able to refer to Canvas\n\n  /** Ensures initial rendering is performed, and that whenever model changes, it is re-rendered. */\n  React.useEffect (() => {\n    \n    /** Happens once. */\n    redrawCanvas(model, canvasRef.current, appRef.current);\n  }, [model, redraw])   // this second argument is CRITICAL, since it declares when to refresh (whenever Model changes)\n\n  // controller to handle moving\n  const moveNinjaSe = (direction) => {\n\n    const ninjaSeSize = 2; // Size of the ninjase block\n\n    // Find the current position of the 2x2 ninjase block\n    let ninjaSePosition = null;\n    for (let r = 0; r < model.board.grid.length; r++) {\n        for (let c = 0; c < model.board.grid[r].length; c++) {\n            if (model.board.grid[r][c].color === 'green') {\n                if (\n                    r + 1 < model.board.grid.length &&\n                    c + 1 < model.board.grid[r].length &&\n                    model.board.grid[r + 1][c].color === 'green' &&\n                    model.board.grid[r][c + 1].color === 'green'\n                ) {\n                    ninjaSePosition = { row: r, col: c };\n                    break;\n                }\n            }\n        }\n        if (ninjaSePosition) break;\n    }\n\n    if (!ninjaSePosition) {\n        console.error(\"2x2 ninjase block not found.\");\n        return;\n    }\n\n    // Perform the move based on the direction\n    switch (direction) {\n        case \"Up\":\n            if (ninjaSePosition.row > 0) {\n                // Clear the current 2x2 area\n                for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n                    for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n                        model.board.grid[r][c].color = 'white'; // Assuming white is the background color\n                    }\n                }\n                // Move the 2x2 ninjase block up\n                ninjaSePosition.row--;\n                // Set the new 2x2 area to green\n                for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n                    for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n                        model.board.grid[r][c].color = 'green';\n                    }\n                }\n                forceRedraw(redraw + 1);\n            }\n            break;\n        case \"Right\":\n            // Handle right movement similarly to \"Up\"\n            // (You can implement it in a way similar to \"Up\" but moving to the right)\n            break;\n        case \"Down\":\n            // Handle down movement similarly to \"Up\"\n            // (You can implement it in a way similar to \"Up\" but moving down)\n            break;\n        case \"Left\":\n            // Handle left movement similarly to \"Up\"\n            // (You can implement it in a way similar to \"Up\" but moving to the left)\n            break;\n        default:\n            console.error(\"Invalid direction:\", direction);\n    }\n\n   // model.board.grid[1][3].color = 'red'\n   // forceRedraw(redraw+1)   // react to changes, if model has changed.\n  }\n\n  return (\n    <div className=\"App\" ref={appRef}>\n      <canvas tabIndex=\"1\"  \n        data-testid=\"canvas\"\n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={500}\n        height={500}\n        />\n      \n       <img id=\"ninjase\" src={ninjase} alt=\"hidden\" hidden></img>\n\n\n       <label data-testid=\"moves-label\" style={layout.text}>{\"number moves: \" + model.numMoves}</label>\n        <div style={layout.buttons}>\n           <button className=\"upbutton\" data-testid=\"upbutton\" style={App.upbutton}     onClick={(e) => moveNinjaSe(\"Up\")}       >UP</button>\n           <button className=\"leftbutton\" data-testid=\"leftbutton\" style={App.leftbutton}   onClick={(e) => moveNinjaSe(\"Left\")}   >LEFT</button>\n           <button className=\"rightbutton\" data-testid=\"rightbutton\" style={App.rightbutton}  onClick={(e) => moveNinjaSe(\"Right\")}  >RIGHT</button>\n           <button className=\"downbutton\" data-testid=\"downbutton\" style={App.downbutton}   onClick={(e) => moveNinjaSe(\"Down\")}   >DOWN</button>\n        </div>\n     \n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}