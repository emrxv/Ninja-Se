{"ast":null,"code":"import { config_4x4, config_5x5, config_6x6 } from \"./config\";\n\n// someone needs to know about these configurations. Perhaps we should!\nconst configs = [config_5x5, config_4x4, config_6x6];\n\n// wouldn't it be useful to have a Square class?\nexport class Square {\n  constructor(row, column) {\n    this.row = row;\n    this.column = column;\n  }\n}\nexport class Board {\n  constructor(size) {\n    this.size = size;\n    this.grid = Array.from(Array(size), () => new Array(size));\n    for (let r = 0; r < size; r++) {\n      for (let c = 0; c < size; c++) {\n        this.grid[r][c] = new Square(r, c);\n      }\n    }\n\n    // how you access a square by its [row][column] location\n    // this.grid[2][4]\n  }\n\n  // Remove a 2x2 block by changing its color to white\n  remove2x2Block(row, column) {\n    for (let r = row; r < row + 2; r++) {\n      for (let c = column; c < column + 2; c++) {\n        this.grid[r][c].color = 'white';\n      }\n    }\n  }\n}\n\n// a method that might be useful\nexport function isWon(model) {\n  return false;\n}\nexport default class Model {\n  // info is going to be JSON-encoded puzzle\n\n  // 'which' is an integer 0..1..2 which selects configuration you can use.\n  constructor(which) {\n    this.config = configs[which];\n    this.ninjaRow = this.config.ninjaRow - 1;\n    this.ninjaColumn = this.config.ninjaColumn.charCodeAt(0) - 'A'.charCodeAt(0);\n    this.size = Number(this.config.numColumns);\n    this.board = new Board(this.size);\n    this.numMoves = 0;\n    console.log(this.config);\n    for (let info of this.config.initial) {\n      console.log(info);\n      //info will be ... {\"color\" : \"red\", \"row\" : \"1\", \"column\" : \"D\"},\n      let row = Number(info.row) - 1;\n      let column = info.column.charCodeAt(0) - 'A'.charCodeAt(0);\n      this.board.grid[row][column].color = info.color;\n    }\n  }\n\n  // Select a 2x2 block. Returns true if successful, false if not.\n  select2x2Block(row, column, gridSize) {\n    // Check if the row and column are within the bounds of the grid\n    // and that the selected block is not already selected or is selectable\n    if (row >= 0 && row < gridSize && column >= 0 && column < gridSize) {\n      this.selectedBlock = {\n        row,\n        column\n      };\n      return true;\n    }\n    return false;\n  }\n\n  // Remove the selected 2x2 block\n  removeSelected2x2Block() {\n    if (this.selectedBlock) {\n      this.board.remove2x2Block(this.selectedBlock.row, this.selectedBlock.column);\n      this.selectedBlock = null; // Clear the selection after removal\n    }\n  }\n}","map":{"version":3,"names":["config_4x4","config_5x5","config_6x6","configs","Square","constructor","row","column","Board","size","grid","Array","from","r","c","remove2x2Block","color","isWon","model","Model","which","config","ninjaRow","ninjaColumn","charCodeAt","Number","numColumns","board","numMoves","console","log","info","initial","select2x2Block","gridSize","selectedBlock","removeSelected2x2Block"],"sources":["/Users/emresunar/Documents/CS3733/IProj/starter/src/model/Model.js"],"sourcesContent":["import { config_4x4, config_5x5, config_6x6 } from \"./config\";\n\n// someone needs to know about these configurations. Perhaps we should!\nconst configs = [config_5x5, config_4x4, config_6x6]\n\n\n// wouldn't it be useful to have a Square class?\nexport class Square {\n    constructor(row, column) {\n        this.row = row\n        this.column = column\n    }\n}\n\nexport class Board {\n    constructor(size) {\n        this.size = size\n\n        this.grid = Array.from(Array(size), () => new Array(size));\n\n        for (let r = 0; r < size; r++) {\n            for (let c = 0; c < size; c++) {\n                this.grid[r][c] = new Square(r, c)\n            }\n        }\n\n        // how you access a square by its [row][column] location\n        // this.grid[2][4]\n    }\n\n     \n\n    // Remove a 2x2 block by changing its color to white\n    remove2x2Block(row, column) {\n        for (let r = row; r < row + 2; r++) {\n            for (let c = column; c < column + 2; c++) {\n                this.grid[r][c].color = 'white';\n            }\n        }\n    }\n}\n\n// a method that might be useful\nexport function isWon(model) {\n\n    return false;\n}\n\n\n\nexport default class Model {\n    // info is going to be JSON-encoded puzzle\n\n    // 'which' is an integer 0..1..2 which selects configuration you can use.\n    constructor(which) {\n        this.config = configs[which]\n        this.ninjaRow = this.config.ninjaRow - 1\n        this.ninjaColumn = (this.config.ninjaColumn.charCodeAt(0) - 'A'.charCodeAt(0))\n\n\n        this.size = Number(this.config.numColumns)\n        this.board = new Board(this.size)\n\n        this.numMoves = 0;\n\n        console.log(this.config)\n        for (let info of this.config.initial) {\n            console.log(info)\n            //info will be ... {\"color\" : \"red\", \"row\" : \"1\", \"column\" : \"D\"},\n            let row = Number(info.row) - 1\n            let column = info.column.charCodeAt(0) - 'A'.charCodeAt(0)\n            this.board.grid[row][column].color = info.color\n\n\n        }\n    }\n\n\n// Select a 2x2 block. Returns true if successful, false if not.\nselect2x2Block(row, column, gridSize) {\n    // Check if the row and column are within the bounds of the grid\n    // and that the selected block is not already selected or is selectable\n    if (row >= 0 && row < gridSize && column >= 0 && column < gridSize) {\n      this.selectedBlock = { row, column };\n      return true;\n    }\n    return false;\n  }\n  \n\n\n\n    // Remove the selected 2x2 block\n    removeSelected2x2Block() {\n        if (this.selectedBlock) {\n            this.board.remove2x2Block(this.selectedBlock.row, this.selectedBlock.column);\n            this.selectedBlock = null; // Clear the selection after removal\n        }\n    }\n\n    \n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}