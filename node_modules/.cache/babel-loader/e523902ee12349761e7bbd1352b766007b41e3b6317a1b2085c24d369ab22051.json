{"ast":null,"code":"var _jsxFileName = \"/Users/emresunar/Documents/CS3733/IProj/starter/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './App.css';\nimport ninjase from './ninjase.svg';\nimport Model from './model/Model.js';\nimport Board from './model/Model.js';\nimport { isWon } from './model/Model.js';\nimport { redrawCanvas } from './boundary/Boundary.js';\nimport { layout } from './Layout.js';\nimport { config_4x4, config_5x5 } from './model/config';\nimport { setSelectionRange } from '@testing-library/user-event/dist/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // initial instantiation of the Model\n  const [model, setModel] = React.useState(new Model(0)); // only place where Model object is instantiated.\n  const [redraw, forceRedraw] = React.useState(0); // change values to force redraw\n\n  const appRef = React.useRef(null); // Later need to be able to refer to App \n  const canvasRef = React.useRef(null); // Later need to be able to refer to Canvas\n\n  /** Ensures initial rendering is performed, and that whenever model changes, it is re-rendered. */\n  React.useEffect(() => {\n    /** Happens once. */\n    // selection(model, )\n    redrawCanvas(model, canvasRef.current, appRef.current);\n  }, [model, redraw]); // this second argument is CRITICAL, since it declares when to refresh (whenever Model changes)\n\n  // controller to handle moving\n  const moveNinjaSe = direction => {\n    if (!Board.isWon) {\n      switch (direction) {\n        case \"Up\":\n          //Checks if ninjase is at top\n          if (model.ninjaRow >= 1) {\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            //for each column above ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let aboveColor = model.board.grid[model.ninjaRow - 1][col].color;\n              let shouldWrap = false;\n              if (aboveColor === undefined || aboveColor === 'white') {\n                continue;\n              } else {\n                let foundWhite = false;\n                for (let row = model.ninjaRow - 1; row >= 0; row--) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    for (let r = row; r < model.ninjaRow - 1; r++) {\n                      model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                      model.board.grid[r + 1][col].color = 'white';\n                    }\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  // Both blocks in the top are colored and not white, perform wrapping\n                  let tempColor = model.board.grid[0][col].color; // Store the color of the top block\n\n                  // Shift every block down by one\n                  for (let r = 0; r < model.board.grid.length - 1; r++) {\n                    model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                  }\n\n                  // Place the top block color at the bottom\n                  model.board.grid[model.board.grid.length - 1][col].color = tempColor;\n                }\n              }\n            }\n            //moves ninjase up\n            model.ninjaRow--;\n\n            // increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Right\":\n          if (model.ninjaColumn !== model.config.numColumns - 2) {\n            // For each row in the ninja's 2x2 area\n            for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n              let row = model.ninjaRow + rowOffset;\n              let rightColor = model.board.grid[row][model.ninjaColumn + 2].color; // +2 to get the column to the right of the ninja\n              let shouldWrap = false;\n              if (rightColor === undefined || rightColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the column to the right of the ninja\n                for (let col = model.ninjaColumn + 2; col < model.config.numColumns; col++) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    // Move all colored blocks left by one\n                    for (let c = col; c > model.ninjaColumn + 1; c--) {\n                      model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                    }\n                    // Set the cell immediately to the right of the ninja to white\n                    model.board.grid[row][model.ninjaColumn + 1].color = undefined;\n                    break;\n                  }\n                }\n\n                // If no white cell is found, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  // Perform wrapping for the row\n                  let tempColor = model.board.grid[row][model.config.numColumns - 1].color; // Store the color of the rightmost block\n\n                  // Shift every block in the row left by one\n                  for (let c = model.config.numColumns - 1; c > 0; c--) {\n                    model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                  }\n\n                  // Place the rightmost block color at the start of the row\n                  model.board.grid[row][0].color = tempColor;\n                }\n              }\n            }\n\n            // Moves ninjase right\n            model.ninjaColumn++;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Down\":\n          // Checks if ninjase is at the bottom\n          if (model.ninjaRow !== model.config.numRows - 2) {\n            // Checks if ninjase is at the bottom\n\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            // For each column below ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let belowColor = model.board.grid[model.ninjaRow + 2][col].color; // +2 to get the row below the 2x2 ninja\n              let shouldWrap = false;\n              if (belowColor === undefined || belowColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the row below the ninja downwards\n                for (let row = model.ninjaRow + 2; row < model.board.grid.length; row++) {\n                  if (model.board.grid[row][col].color === 'white') {\n                    foundWhite = true;\n                    // Move all colored blocks down by one\n                    for (let r = row; r > model.ninjaRow + 1; r--) {\n                      // Note: r > model.ninjaRow + 1 to not overwrite the ninja itself\n                      model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                    }\n                    // Set the cell immediately below the ninja to white\n                    model.board.grid[model.ninjaRow + 1][col].color = 'white';\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  // Perform wrapping\n                  let tempColor = model.board.grid[model.board.grid.length - 1][col].color; // Store the color of the bottom block\n\n                  // Shift every block up by one\n                  for (let r = model.board.grid.length - 1; r > 0; r--) {\n                    model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                  }\n\n                  // Place the bottom block color at the top\n                  model.board.grid[0][col].color = tempColor;\n                }\n              }\n            }\n\n            // Moves ninjase down\n            model.ninjaRow++;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Left\":\n          if (model.ninjaColumn !== 0) {\n            // For each row in the ninja's 2x2 area\n            for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n              let row = model.ninjaRow + rowOffset;\n              let leftColor = model.board.grid[row][model.ninjaColumn - 1].color; // -1 to get the column to the left of the ninja\n              let shouldWrap = false;\n              if (leftColor === undefined || leftColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the column immediately to the left of the ninja\n                for (let col = model.ninjaColumn - 1; col >= 0; col--) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    // Move all colored blocks to the right by one\n                    for (let c = col; c < model.ninjaColumn; c++) {\n                      model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n                    }\n                    // Set the cell immediately to the left of the ninja to white\n                    model.board.grid[row][model.ninjaColumn].color = undefined;\n                    break;\n                  }\n                }\n\n                // If no white cell is found, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  // Perform wrapping for the row\n                  let tempColor = model.board.grid[row][0].color; // Store the color of the leftmost block\n\n                  // Shift every block in the row right by one\n                  for (let c = 0; c < model.config.numColumns - 1; c++) {\n                    model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n                  }\n\n                  // Place the leftmost block color at the end of the row\n                  model.board.grid[row][model.config.numColumns - 1].color = tempColor;\n                }\n              }\n            }\n\n            // Moves ninjase left\n            model.ninjaColumn--;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n      }\n      forceRedraw(redraw + 1);\n    }\n\n    // model.board.grid[1][3].color = 'red'\n    //forceRedraw(redraw+1)   // react to changes, if model has changed.\n  };\n\n  function ChangeConfig(config) {\n    const newModel = new Model(config);\n    setModel(newModel);\n  }\n  function ResetConfig(config) {\n    let num = 0;\n    if (config === config_4x4) {\n      num = 1;\n    } else if (config === config_5x5) {\n      num = 0;\n    } else {\n      num = 2;\n    }\n    const newModel = new Model(num);\n    setModel(newModel);\n  }\n\n  //------------------------------------------------------------------------------------------\n\n  const squareSize = 500 / model.size; // Assuming your canvas is 500x500 and you want it to fit the entire model.\n\n  function find2x2ClusterContainingClick(row, column, boardSize, grid) {\n    // Loop over the board to find a 2x2 cluster\n    for (let r = 0; r < boardSize - 1; r++) {\n      for (let c = 0; c < boardSize - 1; c++) {\n        var _grid$r$c, _grid$r, _grid$c, _grid;\n        // Check if the current 2x2 block is of the same color\n        const color = (_grid$r$c = grid[r][c]) === null || _grid$r$c === void 0 ? void 0 : _grid$r$c.color;\n        console.log(color);\n        if (color &&\n        // Make sure the color is not white/undefined\n        ((_grid$r = grid[r][c + 1]) === null || _grid$r === void 0 ? void 0 : _grid$r.color) === color && ((_grid$c = grid[r + 1][c]) === null || _grid$c === void 0 ? void 0 : _grid$c.color) === color && ((_grid = grid[r + 1][c + 1]) === null || _grid === void 0 ? void 0 : _grid.color) === color) {\n          console.log(r, c);\n          // We found a 2x2 cluster of the same color, now check if the click is within this cluster\n          if (row >= r && row < r + 2 && column >= c && column < c + 2) {\n            // The user's click is inside the 2x2 cluster\n            console.log(r, c);\n            return {\n              row: r,\n              column: c\n            }; // Return the top-left corner of the cluster\n          }\n        }\n      }\n    }\n    // If no cluster contains the click, return null\n    return null;\n  }\n\n  // Remove a 2x2 block by changing its color to white\n  function remove2x2Block(row, column) {\n    for (let r = row; r < row + 2; r++) {\n      for (let c = column; c < column + 2; c++) {\n        this.grid[r][c].color = 'white';\n      }\n    }\n    forceRedraw(redraw + 1); // Trigger a redraw if needed\n  }\n\n  const handleGridClick = e => {\n    // Get the canvas's bounding rectangle\n    const rect = canvasRef.current.getBoundingClientRect();\n\n    // Calculate the click position relative to the canvas\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    // Calculate the row and column that was clicked\n    const row = Math.floor(y / squareSize * 2) + 1;\n    const column = Math.floor(x / squareSize * 2) + 1;\n    if (find2x2ClusterContainingClick(row, column, model.board.size, model.board.grid) !== null) {\n      remove2x2Block(find2x2ClusterContainingClick(row, column, model.board.size, model.board.grid));\n    }\n  };\n  function removeSelection() {\n    // if (Board.is2x2BlockSameColor()) {\n    remove2x2Block();\n    // Here you might also need to update the UI to reflect the changes\n    //  }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ref: appRef,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      tabIndex: \"1\",\n      \"data-testid\": \"canvas\",\n      className: \"App-canvas\",\n      ref: canvasRef,\n      width: 500,\n      height: 500,\n      onClick: handleGridClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 361,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: layout.scaling,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        \"data-testid\": \"moves-label\",\n        style: layout.text,\n        children: \"number moves: \" + model.numMoves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Config1\",\n        \"data-testid\": \"Config1\",\n        style: layout.Config1,\n        onClick: e => ChangeConfig(0),\n        children: \"Config 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Config2\",\n        \"data-testid\": \"Config2\",\n        style: layout.Config2,\n        onClick: e => ChangeConfig(1),\n        children: \"Config 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Config3\",\n        \"data-testid\": \"Config3\",\n        style: layout.Config3,\n        onClick: e => ChangeConfig(2),\n        children: \"Config 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Reset\",\n        \"data-testid\": \"Reset\",\n        style: layout.Reset,\n        onClick: e => ResetConfig(model.config),\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Remove\",\n        \"data-testid\": \"Remove\",\n        style: layout.Remove,\n        onClick: removeSelection(),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 379,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: layout.buttons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upbutton\",\n          \"data-testid\": \"upbutton\",\n          style: layout.upbutton,\n          onClick: e => moveNinjaSe(\"Up\"),\n          children: \"UP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"leftbutton\",\n          \"data-testid\": \"leftbutton\",\n          style: layout.leftbutton,\n          onClick: e => moveNinjaSe(\"Left\"),\n          children: \"LEFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"rightbutton\",\n          \"data-testid\": \"rightbutton\",\n          style: layout.rightbutton,\n          onClick: e => moveNinjaSe(\"Right\"),\n          children: \"RIGHT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 383,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"downbutton\",\n          \"data-testid\": \"downbutton\",\n          style: layout.downbutton,\n          onClick: e => moveNinjaSe(\"Down\"),\n          children: \"DOWN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"ninjase\",\n      src: ninjase,\n      alt: \"hidden\",\n      hidden: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 360,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hjqSLNayM3DeZaL/BO+A2eMkUtY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ninjase","Model","Board","isWon","redrawCanvas","layout","config_4x4","config_5x5","setSelectionRange","jsxDEV","_jsxDEV","App","_s","model","setModel","useState","redraw","forceRedraw","appRef","useRef","canvasRef","useEffect","current","moveNinjaSe","direction","ninjaRow","ninjaAnchorColumn","ninjaColumn","colOffset","col","aboveColor","board","grid","color","shouldWrap","undefined","foundWhite","row","r","tempColor","length","numMoves","config","numColumns","rowOffset","rightColor","c","numRows","belowColor","leftColor","ChangeConfig","newModel","ResetConfig","num","squareSize","size","find2x2ClusterContainingClick","column","boardSize","_grid$r$c","_grid$r","_grid$c","_grid","console","log","remove2x2Block","handleGridClick","e","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","Math","floor","removeSelection","className","ref","children","tabIndex","width","height","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","scaling","text","Config1","Config2","Config3","Reset","Remove","buttons","upbutton","leftbutton","rightbutton","downbutton","id","src","alt","hidden","_c","$RefreshReg$"],"sources":["/Users/emresunar/Documents/CS3733/IProj/starter/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\nimport ninjase from './ninjase.svg'\nimport Model from './model/Model.js';\nimport Board from './model/Model.js'\nimport { isWon } from './model/Model.js'\nimport { redrawCanvas } from './boundary/Boundary.js'\nimport { layout } from './Layout.js'\nimport { config_4x4, config_5x5 } from './model/config';\nimport { setSelectionRange } from '@testing-library/user-event/dist/utils';\n\nfunction App() {\n  // initial instantiation of the Model\n  const [model, setModel] = React.useState(new Model(0));  // only place where Model object is instantiated.\n  const [redraw, forceRedraw] = React.useState(0);    // change values to force redraw\n\n  const appRef = React.useRef(null);      // Later need to be able to refer to App \n  const canvasRef = React.useRef(null);   // Later need to be able to refer to Canvas\n\n\n  /** Ensures initial rendering is performed, and that whenever model changes, it is re-rendered. */\n  React.useEffect(() => {\n    /** Happens once. */\n   // selection(model, )\n    redrawCanvas(model, canvasRef.current, appRef.current);\n  }, [model, redraw])   // this second argument is CRITICAL, since it declares when to refresh (whenever Model changes)\n\n  // controller to handle moving\n  const moveNinjaSe = (direction) => {\n\n    if (!Board.isWon) {\n      switch (direction) {\n        case \"Up\":\n          //Checks if ninjase is at top\n          if (model.ninjaRow >= 1) {\n\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            //for each column above ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let aboveColor = model.board.grid[model.ninjaRow - 1][col].color;\n              let shouldWrap = false;\n\n              if (aboveColor === undefined || aboveColor === 'white') {\n                continue;\n              } else {\n                let foundWhite = false;\n\n                for (let row = model.ninjaRow - 1; row >= 0; row--) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    for (let r = row; r < model.ninjaRow - 1; r++) {\n                      model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                      model.board.grid[r + 1][col].color = 'white';\n                    }\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n\n                if (shouldWrap) {\n                  // Both blocks in the top are colored and not white, perform wrapping\n                  let tempColor = model.board.grid[0][col].color; // Store the color of the top block\n\n                  // Shift every block down by one\n                  for (let r = 0; r < model.board.grid.length - 1; r++) {\n                    model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                  }\n\n                  // Place the top block color at the bottom\n                  model.board.grid[model.board.grid.length - 1][col].color = tempColor;\n\n                }\n              }\n\n            }\n            //moves ninjase up\n            model.ninjaRow--;\n\n            // increment moves\n            model.numMoves++;\n          }\n          break;\n\n\n        case \"Right\":\n          if (model.ninjaColumn !== model.config.numColumns - 2) {\n            // For each row in the ninja's 2x2 area\n            for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n              let row = model.ninjaRow + rowOffset;\n              let rightColor = model.board.grid[row][model.ninjaColumn + 2].color; // +2 to get the column to the right of the ninja\n              let shouldWrap = false;\n\n              if (rightColor === undefined || rightColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the column to the right of the ninja\n                for (let col = model.ninjaColumn + 2; col < model.config.numColumns; col++) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    // Move all colored blocks left by one\n                    for (let c = col; c > model.ninjaColumn + 1; c--) {\n                      model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                    }\n                    // Set the cell immediately to the right of the ninja to white\n                    model.board.grid[row][model.ninjaColumn + 1].color = undefined;\n                    break;\n                  }\n                }\n\n                // If no white cell is found, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n\n                if (shouldWrap) {\n                  // Perform wrapping for the row\n                  let tempColor = model.board.grid[row][model.config.numColumns - 1].color; // Store the color of the rightmost block\n\n                  // Shift every block in the row left by one\n                  for (let c = model.config.numColumns - 1; c > 0; c--) {\n                    model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                  }\n\n                  // Place the rightmost block color at the start of the row\n                  model.board.grid[row][0].color = tempColor;\n                }\n              }\n            }\n\n            // Moves ninjase right\n            model.ninjaColumn++;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Down\":\n          // Checks if ninjase is at the bottom\n          if (model.ninjaRow !== model.config.numRows - 2) {\n            // Checks if ninjase is at the bottom\n\n\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            // For each column below ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let belowColor = model.board.grid[model.ninjaRow + 2][col].color; // +2 to get the row below the 2x2 ninja\n              let shouldWrap = false;\n\n              if (belowColor === undefined || belowColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the row below the ninja downwards\n                for (let row = model.ninjaRow + 2; row < model.board.grid.length; row++) {\n                  if (model.board.grid[row][col].color === 'white') {\n                    foundWhite = true;\n                    // Move all colored blocks down by one\n                    for (let r = row; r > model.ninjaRow + 1; r--) { // Note: r > model.ninjaRow + 1 to not overwrite the ninja itself\n                      model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                    }\n                    // Set the cell immediately below the ninja to white\n                    model.board.grid[model.ninjaRow + 1][col].color = 'white';\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n\n                if (shouldWrap) {\n                  // Perform wrapping\n                  let tempColor = model.board.grid[model.board.grid.length - 1][col].color; // Store the color of the bottom block\n\n                  // Shift every block up by one\n                  for (let r = model.board.grid.length - 1; r > 0; r--) {\n                    model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                  }\n\n                  // Place the bottom block color at the top\n                  model.board.grid[0][col].color = tempColor;\n                }\n              }\n            }\n\n            // Moves ninjase down\n            model.ninjaRow++;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Left\":\n          if (model.ninjaColumn !== 0) {\n\n    // For each row in the ninja's 2x2 area\n    for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n      let row = model.ninjaRow + rowOffset;\n      let leftColor = model.board.grid[row][model.ninjaColumn - 1].color; // -1 to get the column to the left of the ninja\n      let shouldWrap = false;\n\n      if (leftColor === undefined || leftColor === 'white') {\n        // Skip if out of bounds (undefined)\n        continue;\n      } else {\n        let foundWhite = false;\n\n        // Start checking from the column immediately to the left of the ninja\n        for (let col = model.ninjaColumn - 1; col >= 0; col--) {\n          if (model.board.grid[row][col].color === undefined) {\n            foundWhite = true;\n            // Move all colored blocks to the right by one\n            for (let c = col; c < model.ninjaColumn; c++) {\n              model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n            }\n            // Set the cell immediately to the left of the ninja to white\n            model.board.grid[row][model.ninjaColumn].color = undefined;\n            break;\n          }\n        }\n\n        // If no white cell is found, trigger wrapping\n        if (!foundWhite) {\n          shouldWrap = true;\n        }\n\n        if (shouldWrap) {\n          // Perform wrapping for the row\n          let tempColor = model.board.grid[row][0].color; // Store the color of the leftmost block\n\n          // Shift every block in the row right by one\n          for (let c = 0; c < model.config.numColumns - 1; c++) {\n            model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n          }\n\n          // Place the leftmost block color at the end of the row\n          model.board.grid[row][model.config.numColumns - 1].color = tempColor;\n        }\n      }\n    }\n\n    // Moves ninjase left\n    model.ninjaColumn--;\n\n    // Increment moves\n    model.numMoves++;\n  }\n  break;\n      }\n      forceRedraw(redraw + 1);\n    }\n\n\n    // model.board.grid[1][3].color = 'red'\n    //forceRedraw(redraw+1)   // react to changes, if model has changed.\n  }\n\n\n  function ChangeConfig(config) {\n    const newModel = new Model(config);\n    setModel(newModel);\n  }\n\n  function ResetConfig(config) {\n    let num = 0;\n    if (config === config_4x4) {\n      num = 1;\n    } else if (config === config_5x5) {\n      num = 0;\n    } else {\n      num = 2;\n    }\n    const newModel = new Model(num);\n    setModel(newModel);\n  }\n\n\n//------------------------------------------------------------------------------------------\n\nconst squareSize = 500 / model.size; // Assuming your canvas is 500x500 and you want it to fit the entire model.\n\nfunction find2x2ClusterContainingClick(row, column, boardSize, grid) {\n  // Loop over the board to find a 2x2 cluster\n  for (let r = 0; r < boardSize - 1; r++) {\n    for (let c = 0; c < boardSize - 1; c++) {\n      // Check if the current 2x2 block is of the same color\n      const color = grid[r][c]?.color;\n      console.log(color)\n      if (color && // Make sure the color is not white/undefined\n          grid[r][c + 1]?.color === color &&\n          grid[r + 1][c]?.color === color &&\n          grid[r + 1][c + 1]?.color === color) {\n            console.log(r, c)\n        // We found a 2x2 cluster of the same color, now check if the click is within this cluster\n        if (row >= r && row < r + 2 && column >= c && column < c + 2) {\n          // The user's click is inside the 2x2 cluster\n          console.log(r, c)\n          return { row: r, column: c }; // Return the top-left corner of the cluster\n        }\n      }\n    }\n  }\n  // If no cluster contains the click, return null\n  return null;\n}\n\n    // Remove a 2x2 block by changing its color to white\n    function remove2x2Block(row, column) {\n      for (let r = row; r < row + 2; r++) {\n          for (let c = column; c < column + 2; c++) {\n              this.grid[r][c].color = 'white';\n          }\n      }\n      forceRedraw(redraw + 1); // Trigger a redraw if needed\n\n  }\n\nconst handleGridClick = (e) => {\n    // Get the canvas's bounding rectangle\n    const rect = canvasRef.current.getBoundingClientRect();\n\n    // Calculate the click position relative to the canvas\n   const x = e.clientX - rect.left;\n   const y = e.clientY - rect.top;\n\n    // Calculate the row and column that was clicked\n    const row = Math.floor((y / squareSize) * 2) + 1;\n    const column = Math.floor((x / squareSize) * 2) + 1;\n\n\n    if (find2x2ClusterContainingClick(row, column, model.board.size, model.board.grid) !== null) {\n      remove2x2Block(find2x2ClusterContainingClick(row, column, model.board.size, model.board.grid));\n    }\n  \n};\n\n\n  function removeSelection() {\n // if (Board.is2x2BlockSameColor()) {\n     remove2x2Block();\n      // Here you might also need to update the UI to reflect the changes\n//  }\n  }\n\n  return (\n    <div className=\"App\" ref={appRef}>\n      <canvas tabIndex=\"1\"\n        data-testid=\"canvas\"\n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={500}\n        height={500}\n        onClick={handleGridClick}\n      />\n\n\n\n      <div style={layout.scaling}>\n        <label data-testid=\"moves-label\" style={layout.text}>{\"number moves: \" + model.numMoves}</label>\n        <button className=\"Config1\" data-testid=\"Config1\" style={layout.Config1} onClick={(e) => ChangeConfig(0)}   >Config 1</button>\n        <button className=\"Config2\" data-testid=\"Config2\" style={layout.Config2} onClick={(e) => ChangeConfig(1)}  >Config 2</button>\n        <button className=\"Config3\" data-testid=\"Config3\" style={layout.Config3} onClick={(e) => ChangeConfig(2)}   >Config 3</button>\n\n        <button className=\"Reset\" data-testid=\"Reset\" style={layout.Reset} onClick={(e) => ResetConfig(model.config)}   >Reset</button>\n        <button className=\"Remove\" data-testid=\"Remove\" style={layout.Remove} onClick={removeSelection()}   >Remove</button>\n        <div style={layout.buttons}>\n          <button className=\"upbutton\" data-testid=\"upbutton\" style={layout.upbutton} onClick={(e) => moveNinjaSe(\"Up\")}       >UP</button>\n          <button className=\"leftbutton\" data-testid=\"leftbutton\" style={layout.leftbutton} onClick={(e) => moveNinjaSe(\"Left\")}   >LEFT</button>\n          <button className=\"rightbutton\" data-testid=\"rightbutton\" style={layout.rightbutton} onClick={(e) => moveNinjaSe(\"Right\")}  >RIGHT</button>\n          <button className=\"downbutton\" data-testid=\"downbutton\" style={layout.downbutton} onClick={(e) => moveNinjaSe(\"Down\")}   >DOWN</button>\n        </div>\n      </div>\n      <img id=\"ninjase\" src={ninjase} alt=\"hidden\" hidden></img>\n    </div>\n  );\n\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}