{"ast":null,"code":"import { config_4x4, config_5x5, config_6x6 } from \"./config\";\n\n// someone needs to know about these configurations. Perhaps we should!\nconst configs = [config_5x5, config_4x4, config_6x6];\n\n// wouldn't it be useful to have a Square class?\nexport class Square {\n  constructor(row, column) {\n    this.row = row;\n    this.column = column;\n  }\n}\nexport class Board {\n  constructor(size) {\n    this.size = size;\n    this.grid = Array.from(Array(size), () => new Array(size));\n    for (let r = 0; r < size; r++) {\n      for (let c = 0; c < size; c++) {\n        this.grid[r][c] = new Square(r, c);\n      }\n    }\n\n    // how you access a square by its [row][column] location\n    // this.grid[2][4]\n  }\n}\n\n// a method that might be useful\nexport function isWon(model) {\n  return false;\n}\nexport default class Model {\n  // info is going to be JSON-encoded puzzle\n\n  // 'which' is an integer 0..1..2 which selects configuration you can use.\n  constructor(which) {\n    this.config = configs[which];\n    this.ninjaRow = this.config.ninjaRow - 1;\n    this.ninjaColumn = this.config.ninjaColumn.charCodeAt(0) - 'A'.charCodeAt(0);\n    this.size = Number(this.config.numColumns);\n    this.board = new Board(this.size);\n    this.selectionrow = selectionrow;\n    this.selectioncol = selectioncol;\n    this.selection = new Square(this.selectionrow, this.selectioncol);\n    this.numMoves = 0;\n    console.log(this.config);\n    for (let info of this.config.initial) {\n      console.log(info);\n      //info will be ... {\"color\" : \"red\", \"row\" : \"1\", \"column\" : \"D\"},\n      let row = Number(info.row) - 1;\n      let column = info.column.charCodeAt(0) - 'A'.charCodeAt(0);\n      this.board.grid[row][column].color = info.color;\n    }\n  }\n}","map":{"version":3,"names":["config_4x4","config_5x5","config_6x6","configs","Square","constructor","row","column","Board","size","grid","Array","from","r","c","isWon","model","Model","which","config","ninjaRow","ninjaColumn","charCodeAt","Number","numColumns","board","selectionrow","selectioncol","selection","numMoves","console","log","info","initial","color"],"sources":["/Users/emresunar/Documents/CS3733/IProj/starter/src/model/Model.js"],"sourcesContent":["import { config_4x4, config_5x5, config_6x6 } from \"./config\";\n\n// someone needs to know about these configurations. Perhaps we should!\nconst configs = [config_5x5, config_4x4, config_6x6]\n\n\n// wouldn't it be useful to have a Square class?\nexport class Square {\n    constructor(row, column) {\n        this.row = row\n        this.column = column\n    }\n}\n\nexport class Board {\n    constructor(size) {\n        this.size = size\n\n        this.grid = Array.from(Array(size), () => new Array(size));\n\n        for (let r = 0; r < size; r++) {\n            for (let c = 0; c < size; c++) {\n                this.grid[r][c] = new Square(r, c)\n            }\n        }\n\n        // how you access a square by its [row][column] location\n        // this.grid[2][4]\n    }\n\n    \n}\n\n// a method that might be useful\nexport function isWon(model) {\n\n    return false;\n}\n\n\n\nexport default class Model {\n    // info is going to be JSON-encoded puzzle\n\n    // 'which' is an integer 0..1..2 which selects configuration you can use.\n    constructor(which) {\n        this.config = configs[which]\n        this.ninjaRow = this.config.ninjaRow - 1\n        this.ninjaColumn = (this.config.ninjaColumn.charCodeAt(0) - 'A'.charCodeAt(0))\n\n\n        this.size = Number(this.config.numColumns)\n        this.board = new Board(this.size)\n        this.selectionrow = selectionrow\n        this.selectioncol = selectioncol\n        this.selection = new Square(this.selectionrow, this.selectioncol)\n        this.numMoves = 0;\n\n        console.log(this.config)\n        for (let info of this.config.initial) {\n            console.log(info)\n            //info will be ... {\"color\" : \"red\", \"row\" : \"1\", \"column\" : \"D\"},\n            let row = Number(info.row) - 1\n            let column = info.column.charCodeAt(0) - 'A'.charCodeAt(0)\n            this.board.grid[row][column].color = info.color\n\n        \n        }\n    }\n\n    \n}"],"mappings":"AAAA,SAASA,UAAU,EAAEC,UAAU,EAAEC,UAAU,QAAQ,UAAU;;AAE7D;AACA,MAAMC,OAAO,GAAG,CAACF,UAAU,EAAED,UAAU,EAAEE,UAAU,CAAC;;AAGpD;AACA,OAAO,MAAME,MAAM,CAAC;EAChBC,WAAWA,CAACC,GAAG,EAAEC,MAAM,EAAE;IACrB,IAAI,CAACD,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,MAAM,GAAGA,MAAM;EACxB;AACJ;AAEA,OAAO,MAAMC,KAAK,CAAC;EACfH,WAAWA,CAACI,IAAI,EAAE;IACd,IAAI,CAACA,IAAI,GAAGA,IAAI;IAEhB,IAAI,CAACC,IAAI,GAAGC,KAAK,CAACC,IAAI,CAACD,KAAK,CAACF,IAAI,CAAC,EAAE,MAAM,IAAIE,KAAK,CAACF,IAAI,CAAC,CAAC;IAE1D,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,IAAI,EAAEI,CAAC,EAAE,EAAE;MAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,IAAI,EAAEK,CAAC,EAAE,EAAE;QAC3B,IAAI,CAACJ,IAAI,CAACG,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,IAAIV,MAAM,CAACS,CAAC,EAAEC,CAAC,CAAC;MACtC;IACJ;;IAEA;IACA;EACJ;AAGJ;;AAEA;AACA,OAAO,SAASC,KAAKA,CAACC,KAAK,EAAE;EAEzB,OAAO,KAAK;AAChB;AAIA,eAAe,MAAMC,KAAK,CAAC;EACvB;;EAEA;EACAZ,WAAWA,CAACa,KAAK,EAAE;IACf,IAAI,CAACC,MAAM,GAAGhB,OAAO,CAACe,KAAK,CAAC;IAC5B,IAAI,CAACE,QAAQ,GAAG,IAAI,CAACD,MAAM,CAACC,QAAQ,GAAG,CAAC;IACxC,IAAI,CAACC,WAAW,GAAI,IAAI,CAACF,MAAM,CAACE,WAAW,CAACC,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAACA,UAAU,CAAC,CAAC,CAAE;IAG9E,IAAI,CAACb,IAAI,GAAGc,MAAM,CAAC,IAAI,CAACJ,MAAM,CAACK,UAAU,CAAC;IAC1C,IAAI,CAACC,KAAK,GAAG,IAAIjB,KAAK,CAAC,IAAI,CAACC,IAAI,CAAC;IACjC,IAAI,CAACiB,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,YAAY,GAAGA,YAAY;IAChC,IAAI,CAACC,SAAS,GAAG,IAAIxB,MAAM,CAAC,IAAI,CAACsB,YAAY,EAAE,IAAI,CAACC,YAAY,CAAC;IACjE,IAAI,CAACE,QAAQ,GAAG,CAAC;IAEjBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACZ,MAAM,CAAC;IACxB,KAAK,IAAIa,IAAI,IAAI,IAAI,CAACb,MAAM,CAACc,OAAO,EAAE;MAClCH,OAAO,CAACC,GAAG,CAACC,IAAI,CAAC;MACjB;MACA,IAAI1B,GAAG,GAAGiB,MAAM,CAACS,IAAI,CAAC1B,GAAG,CAAC,GAAG,CAAC;MAC9B,IAAIC,MAAM,GAAGyB,IAAI,CAACzB,MAAM,CAACe,UAAU,CAAC,CAAC,CAAC,GAAG,GAAG,CAACA,UAAU,CAAC,CAAC,CAAC;MAC1D,IAAI,CAACG,KAAK,CAACf,IAAI,CAACJ,GAAG,CAAC,CAACC,MAAM,CAAC,CAAC2B,KAAK,GAAGF,IAAI,CAACE,KAAK;IAGnD;EACJ;AAGJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}