{"ast":null,"code":"/** Redraw entire canvas from model. */\nimport { model } from './Model.js';\nexport function redrawCanvas(model, canvasObj, appObj) {\n  const ctx = canvasObj.getContext('2d');\n  if (ctx === null) {\n    return;\n  } // here for testing purposes...\n\n  // clear the canvas area before rendering the coordinates held in state\n  ctx.clearRect(0, 0, canvasObj.width, canvasObj.height);\n\n  // draws squares based on information? Perhaps you can use some of this concept\n  let size = model.board.size;\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      let square = model.board.grid[r][c];\n      let x = c * 50;\n      let y = r * 50;\n      let w = 50;\n      let h = 50;\n      if (square.color) {\n        ctx.fillStyle = square.color;\n      } else {\n        ctx.fillStyle = 'white';\n      }\n      ctx.fillRect(x, y, w, h);\n    }\n  }\n\n  // THEN draw ninjase\n  let image = document.getElementById('ninjase');\n  let imageSize = 50;\n  let scale = 2;\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      let square = model.board.grid[r][c];\n      if (square.color == 'green' && r + 1 < size && c + 1 < size && model.board.grid[r + 1][c].color == 'green' && model.board.grid[r][c + 1].color == 'green' && model.board.grid[r + 1][c + 1].color == 'green') {\n        let x = c * imageSize;\n        let y = r * imageSize;\n        let w = imageSize * scale;\n        let h = imageSize * scale;\n        ctx.drawImage(image, x, y, w, h);\n      }\n    }\n  }\n}","map":{"version":3,"names":["model","redrawCanvas","canvasObj","appObj","ctx","getContext","clearRect","width","height","size","board","r","c","square","grid","x","y","w","h","color","fillStyle","fillRect","image","document","getElementById","imageSize","scale","drawImage"],"sources":["/Users/emresunar/Documents/CS3733/IProj/starter/src/boundary/Boundary.js"],"sourcesContent":["/** Redraw entire canvas from model. */\nimport {model} from './Model.js'\n\n\nexport function redrawCanvas(model, canvasObj, appObj) {\n    const ctx = canvasObj.getContext('2d');\n    if (ctx === null) { return; }    // here for testing purposes...\n    \n    // clear the canvas area before rendering the coordinates held in state\n    ctx.clearRect( 0,0, canvasObj.width, canvasObj.height);  \n\n    // draws squares based on information? Perhaps you can use some of this concept\n    let size = model.board.size\n    for (let r = 0; r < size; r++) {\n      for (let c = 0; c < size; c++) {\n        let square = model.board.grid[r][c]\n        let x = c * 50\n        let y = r * 50\n        let w = 50\n        let h = 50\n\n        if (square.color) {\n          ctx.fillStyle = square.color\n        } else {\n          ctx.fillStyle = 'white'\n        }\n\n        ctx.fillRect(x, y, w, h)\n        \n\n      }\n    }\n\n    \n    // THEN draw ninjase\n    let image = document.getElementById('ninjase');\n    let imageSize = 50; \n    let scale = 2; \n    \n    for (let r = 0; r < size; r++) {\n        for (let c = 0; c < size; c++) {\n            let square = model.board.grid[r][c];\n            if (square.color == 'green' && \n                r + 1 < size && c + 1 < size &&\n                model.board.grid[r + 1][c].color == 'green' && \n                model.board.grid[r][c + 1].color == 'green' &&\n                model.board.grid[r + 1][c + 1].color == 'green') {\n               \n                let x = c * (imageSize);\n                let y = r * (imageSize);\n                let w = imageSize * scale;\n                let h = imageSize * scale;\n                ctx.drawImage(image, x, y, w, h);\n            }\n        }\n    }\n\n}"],"mappings":"AAAA;AACA,SAAQA,KAAK,QAAO,YAAY;AAGhC,OAAO,SAASC,YAAYA,CAACD,KAAK,EAAEE,SAAS,EAAEC,MAAM,EAAE;EACnD,MAAMC,GAAG,GAAGF,SAAS,CAACG,UAAU,CAAC,IAAI,CAAC;EACtC,IAAID,GAAG,KAAK,IAAI,EAAE;IAAE;EAAQ,CAAC,CAAI;;EAEjC;EACAA,GAAG,CAACE,SAAS,CAAE,CAAC,EAAC,CAAC,EAAEJ,SAAS,CAACK,KAAK,EAAEL,SAAS,CAACM,MAAM,CAAC;;EAEtD;EACA,IAAIC,IAAI,GAAGT,KAAK,CAACU,KAAK,CAACD,IAAI;EAC3B,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAEE,CAAC,EAAE,EAAE;IAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAEG,CAAC,EAAE,EAAE;MAC7B,IAAIC,MAAM,GAAGb,KAAK,CAACU,KAAK,CAACI,IAAI,CAACH,CAAC,CAAC,CAACC,CAAC,CAAC;MACnC,IAAIG,CAAC,GAAGH,CAAC,GAAG,EAAE;MACd,IAAII,CAAC,GAAGL,CAAC,GAAG,EAAE;MACd,IAAIM,CAAC,GAAG,EAAE;MACV,IAAIC,CAAC,GAAG,EAAE;MAEV,IAAIL,MAAM,CAACM,KAAK,EAAE;QAChBf,GAAG,CAACgB,SAAS,GAAGP,MAAM,CAACM,KAAK;MAC9B,CAAC,MAAM;QACLf,GAAG,CAACgB,SAAS,GAAG,OAAO;MACzB;MAEAhB,GAAG,CAACiB,QAAQ,CAACN,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IAG1B;EACF;;EAGA;EACA,IAAII,KAAK,GAAGC,QAAQ,CAACC,cAAc,CAAC,SAAS,CAAC;EAC9C,IAAIC,SAAS,GAAG,EAAE;EAClB,IAAIC,KAAK,GAAG,CAAC;EAEb,KAAK,IAAIf,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,IAAI,EAAEE,CAAC,EAAE,EAAE;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,IAAI,EAAEG,CAAC,EAAE,EAAE;MAC3B,IAAIC,MAAM,GAAGb,KAAK,CAACU,KAAK,CAACI,IAAI,CAACH,CAAC,CAAC,CAACC,CAAC,CAAC;MACnC,IAAIC,MAAM,CAACM,KAAK,IAAI,OAAO,IACvBR,CAAC,GAAG,CAAC,GAAGF,IAAI,IAAIG,CAAC,GAAG,CAAC,GAAGH,IAAI,IAC5BT,KAAK,CAACU,KAAK,CAACI,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,CAAC,CAACO,KAAK,IAAI,OAAO,IAC3CnB,KAAK,CAACU,KAAK,CAACI,IAAI,CAACH,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,CAACO,KAAK,IAAI,OAAO,IAC3CnB,KAAK,CAACU,KAAK,CAACI,IAAI,CAACH,CAAC,GAAG,CAAC,CAAC,CAACC,CAAC,GAAG,CAAC,CAAC,CAACO,KAAK,IAAI,OAAO,EAAE;QAEjD,IAAIJ,CAAC,GAAGH,CAAC,GAAIa,SAAU;QACvB,IAAIT,CAAC,GAAGL,CAAC,GAAIc,SAAU;QACvB,IAAIR,CAAC,GAAGQ,SAAS,GAAGC,KAAK;QACzB,IAAIR,CAAC,GAAGO,SAAS,GAAGC,KAAK;QACzBtB,GAAG,CAACuB,SAAS,CAACL,KAAK,EAAEP,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;MACpC;IACJ;EACJ;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}