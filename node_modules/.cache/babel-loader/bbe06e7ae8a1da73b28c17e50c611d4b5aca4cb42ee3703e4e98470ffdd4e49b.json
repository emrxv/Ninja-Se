{"ast":null,"code":"var _jsxFileName = \"/Users/emresunar/Documents/CS3733/IProj/starter/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './App.css';\nimport ninjase from './ninjase.svg';\nimport Model, { find2x2Cluster, remove2x2Block } from './model/Model.js';\nimport Board from './model/Model.js';\nimport { isWon } from './model/Model.js';\nimport { find2x2ClusterContainingClick } from './model/Model.js';\nimport { redrawCanvas } from './boundary/Boundary.js';\nimport { layout } from './Layout.js';\nimport { config_4x4, config_5x5 } from './model/config';\nimport { setSelectionRange } from '@testing-library/user-event/dist/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // initial instantiation of the Model\n  const [model, setModel] = React.useState(new Model(0)); // only place where Model object is instantiated.\n  const [redraw, forceRedraw] = React.useState(0); // change values to force redraw\n\n  const appRef = React.useRef(null); // Later need to be able to refer to App \n  const canvasRef = React.useRef(null); // Later need to be able to refer to Canvas\n\n  /** Ensures initial rendering is performed, and that whenever model changes, it is re-rendered. */\n  React.useEffect(() => {\n    /** Happens once. */\n    // selection(model, )\n    redrawCanvas(model, canvasRef.current, appRef.current);\n  }, [model, redraw]); // this second argument is CRITICAL, since it declares when to refresh (whenever Model changes)\n\n  // controller to handle moving\n  const moveNinjaSe = direction => {\n    if (!isWon(model)) {\n      let affectedSquares = 0;\n      switch (direction) {\n        case \"Up\":\n          //Checks if ninjase is at top\n          if (model.ninjaRow >= 1) {\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            //for each column above ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let aboveColor = model.board.grid[model.ninjaRow - 1][col].color;\n              let shouldWrap = false;\n              if (aboveColor === undefined || aboveColor === 'white') {\n                continue;\n              } else {\n                let foundWhite = false;\n                for (let row = model.ninjaRow - 1; row >= 0; row--) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    for (let r = row; r < model.ninjaRow - 1; r++) {\n                      model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                      affectedSquares++;\n                      model.board.grid[r + 1][col].color = 'white';\n                    }\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, there is wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  let tempColor = model.board.grid[0][col].color;\n                  for (let r = 0; r < model.board.grid.length - 1; r++) {\n                    model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                  }\n                  for (let r = 0; r < model.ninjaRow; r++) {\n                    if (model.board.grid[r][col].color !== 'white' && model.board.grid[r][col].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n                  model.board.grid[model.board.grid.length - 1][col].color = tempColor;\n                  if (tempColor !== 'white' && tempColor !== undefined) {\n                    affectedSquares++;\n                  }\n                  for (let r = model.board.grid.length - 1; r > model.ninjaRow; r--) {\n                    if (r === model.board.grid.length - 1) {\n                      continue;\n                    }\n                    if (model.board.grid[r][col].color !== 'white' && model.board.grid[r][col].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n                }\n              }\n            }\n            //moves ninjase up\n            model.ninjaRow--;\n            model.numMoves++;\n          }\n          break;\n        case \"Right\":\n          if (model.ninjaColumn !== model.config.numColumns - 2) {\n            for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n              let row = model.ninjaRow + rowOffset;\n              let rightColor = model.board.grid[row][model.ninjaColumn + 2].color; // +2 to get the column to the right of the ninja\n              let shouldWrap = false;\n              if (rightColor === undefined || rightColor === 'white') {\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the column to the right of the ninja\n                for (let col = model.ninjaColumn + 2; col < model.config.numColumns; col++) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    for (let c = col; c > model.ninjaColumn + 1; c--) {\n                      model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                      affectedSquares++;\n                    }\n                    model.board.grid[row][model.ninjaColumn + 1].color = undefined;\n                    break;\n                  }\n                }\n\n                // If no white cell is found, wrap\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  let tempColor = model.board.grid[row][model.config.numColumns - 1].color; // Store the color of the rightmost block\n\n                  for (let c = model.config.numColumns - 1; c > 0; c--) {\n                    model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                  }\n                  model.board.grid[row][0].color = tempColor;\n                  for (let c = model.ninjaColumn + 2; c < model.config.numColumns; c++) {\n                    if (model.board.grid[row][c].color !== 'white' && model.board.grid[row][c].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n                  for (let c = model.ninjaColumn; c >= 0; c--) {\n                    if (model.board.grid[row][c].color !== 'white' && model.board.grid[row][c].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n                }\n              }\n            }\n\n            // Moves ninjase right\n            model.ninjaColumn++;\n            model.numMoves++;\n          }\n          break;\n        case \"Down\":\n          // Checks if ninjase is at the bottom\n          if (model.ninjaRow !== model.config.numRows - 2) {\n            // Checks if ninjase is at the bottom\n\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            // For each column below ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let belowColor = model.board.grid[model.ninjaRow + 2][col].color; // +2 to get the row below the 2x2 ninja\n              let shouldWrap = false;\n              if (belowColor === undefined || belowColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the row below the ninja downwards\n                for (let row = model.ninjaRow + 2; row < model.board.grid.length; row++) {\n                  if (model.board.grid[row][col].color === 'white' || model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    // Move all colored blocks down by one\n                    for (let r = row; r > model.ninjaRow + 1; r--) {\n                      // Note: r > model.ninjaRow + 1 to not overwrite the ninja itself\n                      affectedSquares++;\n                      model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                    }\n                    // Set the cell immediately below the ninja to white\n                    model.board.grid[model.ninjaRow + 1][col].color = undefined;\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  // Perform wrapping\n                  let tempColor = model.board.grid[model.board.grid.length - 1][col].color; // Store the color of the bottom block\n\n                  // Shift every block up by one\n                  for (let r = model.board.grid.length - 1; r > 0; r--) {\n                    model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                  }\n                  for (let r = model.board.grid.length - 1; r > model.ninjaRow + 1; r--) {\n                    if (model.board.grid[r][col].color !== 'white' && model.board.grid[r][col].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n\n                  // Place the bottom block color at the top\n                  model.board.grid[0][col].color = tempColor;\n                  for (let r = 0; r <= model.ninjaRow; r++) {\n                    if (model.board.grid[r][col].color !== 'white' && model.board.grid[r][col].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n                }\n              }\n            }\n\n            // Moves ninjase down\n            model.ninjaRow++;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Left\":\n          if (model.ninjaColumn !== 0) {\n            // For each row in the ninja's 2x2 area\n            for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n              let row = model.ninjaRow + rowOffset;\n              let leftColor = model.board.grid[row][model.ninjaColumn - 1].color; // -1 to get the column to the left of the ninja\n              let shouldWrap = false;\n              if (leftColor === undefined || leftColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the column immediately to the left of the ninja\n                for (let col = model.ninjaColumn - 1; col >= 0; col--) {\n                  if (model.board.grid[row][col].color === undefined || model.board.grid[row][col].color === 'white') {\n                    foundWhite = true;\n                    // Move all colored blocks to the right by one\n                    for (let c = col; c < model.ninjaColumn; c++) {\n                      model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n                      if (model.board.grid[row][c + 1].color !== 'white' && model.board.grid[row][c + 1].color !== undefined) {\n                        affectedSquares++; // Only count the square if it's not white or undefined\n                      }\n                    }\n                    // Set the cell immediately to the left of the ninja to white\n                    model.board.grid[row][model.ninjaColumn].color = undefined;\n                    break;\n                  }\n                }\n\n                // If no white cell is found, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  // Perform wrapping for the row\n                  let tempColor = model.board.grid[row][0].color; // Store the color of the leftmost block\n\n                  // Shift every block in the row right by one\n                  for (let c = 0; c < model.config.numColumns - 1; c++) {\n                    model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n                  }\n\n                  // Place the leftmost block color at the end of the row\n                  model.board.grid[row][model.config.numColumns - 1].color = tempColor;\n\n                  // Count affected squares to the left of the ninja's original position (since they get pushed left due to wrapping)\n                  for (let c = model.ninjaColumn - 2; c >= 0; c--) {\n                    if (model.board.grid[row][c].color !== 'white' && model.board.grid[row][c].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n\n                  // Count affected squares to the right of ninja, this will not include the ninja's current or previous column\n                  for (let c = model.ninjaColumn; c < model.config.numColumns; c++) {\n                    if (model.board.grid[row][c].color !== 'white' && model.board.grid[row][c].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n                }\n              }\n            }\n\n            // Moves ninjase left\n            model.ninjaColumn--;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n      }\n      model.score += affectedSquares;\n      forceRedraw(redraw + 1);\n    }\n\n    // model.board.grid[1][3].color = 'red'\n    //forceRedraw(redraw+1)   // react to changes, if model has changed.\n  };\n\n  //---------------------------------------------------------------------------------------------\n  function ChangeConfig(config) {\n    const newModel = new Model(config);\n    setModel(newModel);\n  }\n  function ResetConfig(config) {\n    let num = 0;\n    if (config === config_4x4) {\n      num = 1;\n    } else if (config === config_5x5) {\n      num = 0;\n    } else {\n      num = 2;\n    }\n    const newModel = new Model(num);\n    setModel(newModel);\n  }\n\n  //------------------------------------------------------------------------------------------\n\n  function removeSelection() {\n    let clusters = find2x2Cluster(model.board.size, model.board.grid, model);\n    if (clusters === null) {\n      return;\n    } else {\n      for (clusters of clusters) {\n        remove2x2Block(clusters.row, clusters.column, model);\n        model.numMoves++;\n        model.score += 4;\n      }\n    }\n    forceRedraw(redraw + 1);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ref: appRef,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      tabIndex: \"1\",\n      \"data-testid\": \"canvas\",\n      className: \"App-canvas\",\n      ref: canvasRef,\n      width: 500,\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: layout.scaling,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        \"data-testid\": \"score-label\",\n        style: layout.score,\n        children: \"Score: \" + model.score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        \"data-testid\": \"moves-label\",\n        style: layout.text,\n        children: \"Number of Moves: \" + model.numMoves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Config1\",\n        \"data-testid\": \"Config1\",\n        style: layout.Config1,\n        onClick: e => ChangeConfig(0),\n        children: \"Config 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Config2\",\n        \"data-testid\": \"Config2\",\n        style: layout.Config2,\n        onClick: e => ChangeConfig(1),\n        children: \"Config 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Config3\",\n        \"data-testid\": \"Config3\",\n        style: layout.Config3,\n        onClick: e => ChangeConfig(2),\n        children: \"Config 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Reset\",\n        \"data-testid\": \"Reset\",\n        style: layout.Reset,\n        onClick: e => ResetConfig(model.config),\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 9\n      }, this), isWon(model) ? /*#__PURE__*/_jsxDEV(\"label\", {\n        \"data-testid\": \"victory-label\",\n        style: layout.victory,\n        children: \"YOU WIN CONGRATULATIONS!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 26\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Remove\",\n        \"data-testid\": \"Remove\",\n        style: layout.Remove,\n        onClick: () => removeSelection(),\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 388,\n        columnNumber: 9\n      }, this), !isWon(model) ? /*#__PURE__*/_jsxDEV(\"div\", {\n        style: layout.buttons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upbutton\",\n          \"data-testid\": \"upbutton\",\n          style: layout.upbutton,\n          onClick: e => moveNinjaSe(\"Up\"),\n          children: \"UP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 390,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"leftbutton\",\n          \"data-testid\": \"leftbutton\",\n          style: layout.leftbutton,\n          onClick: e => moveNinjaSe(\"Left\"),\n          children: \"LEFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"rightbutton\",\n          \"data-testid\": \"rightbutton\",\n          style: layout.rightbutton,\n          onClick: e => moveNinjaSe(\"Right\"),\n          children: \"RIGHT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"downbutton\",\n          \"data-testid\": \"downbutton\",\n          style: layout.downbutton,\n          onClick: e => moveNinjaSe(\"Down\"),\n          children: \"DOWN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 27\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"ninjase\",\n      src: ninjase,\n      alt: \"hidden\",\n      hidden: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 368,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hjqSLNayM3DeZaL/BO+A2eMkUtY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ninjase","Model","find2x2Cluster","remove2x2Block","Board","isWon","find2x2ClusterContainingClick","redrawCanvas","layout","config_4x4","config_5x5","setSelectionRange","jsxDEV","_jsxDEV","App","_s","model","setModel","useState","redraw","forceRedraw","appRef","useRef","canvasRef","useEffect","current","moveNinjaSe","direction","affectedSquares","ninjaRow","ninjaAnchorColumn","ninjaColumn","colOffset","col","aboveColor","board","grid","color","shouldWrap","undefined","foundWhite","row","r","tempColor","length","numMoves","config","numColumns","rowOffset","rightColor","c","numRows","belowColor","leftColor","score","ChangeConfig","newModel","ResetConfig","num","removeSelection","clusters","size","column","className","ref","children","tabIndex","width","height","fileName","_jsxFileName","lineNumber","columnNumber","style","scaling","text","Config1","onClick","e","Config2","Config3","Reset","victory","Remove","buttons","upbutton","leftbutton","rightbutton","downbutton","id","src","alt","hidden","_c","$RefreshReg$"],"sources":["/Users/emresunar/Documents/CS3733/IProj/starter/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\nimport ninjase from './ninjase.svg'\nimport Model, { find2x2Cluster, remove2x2Block } from './model/Model.js';\nimport Board from './model/Model.js'\nimport { isWon } from './model/Model.js'\nimport { find2x2ClusterContainingClick } from './model/Model.js'\nimport { redrawCanvas } from './boundary/Boundary.js'\nimport { layout } from './Layout.js'\nimport { config_4x4, config_5x5 } from './model/config';\nimport { setSelectionRange } from '@testing-library/user-event/dist/utils';\n\nfunction App() {\n  // initial instantiation of the Model\n  const [model, setModel] = React.useState(new Model(0));  // only place where Model object is instantiated.\n  const [redraw, forceRedraw] = React.useState(0);    // change values to force redraw\n\n  const appRef = React.useRef(null);      // Later need to be able to refer to App \n  const canvasRef = React.useRef(null);   // Later need to be able to refer to Canvas\n\n\n  /** Ensures initial rendering is performed, and that whenever model changes, it is re-rendered. */\n  React.useEffect(() => {\n    /** Happens once. */\n    // selection(model, )\n    redrawCanvas(model, canvasRef.current, appRef.current);\n  }, [model, redraw])   // this second argument is CRITICAL, since it declares when to refresh (whenever Model changes)\n\n  // controller to handle moving\n  const moveNinjaSe = (direction) => {\n\n    if (!isWon(model)) {\n      let affectedSquares = 0;\n      switch (direction) {\n        case \"Up\":\n          //Checks if ninjase is at top\n          if (model.ninjaRow >= 1) {\n\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            //for each column above ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let aboveColor = model.board.grid[model.ninjaRow - 1][col].color;\n              let shouldWrap = false;\n\n              if (aboveColor === undefined || aboveColor === 'white') {\n                continue;\n              } else {\n                let foundWhite = false;\n\n                for (let row = model.ninjaRow - 1; row >= 0; row--) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    for (let r = row; r < model.ninjaRow - 1; r++) {\n                      model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                      affectedSquares++;\n                      model.board.grid[r + 1][col].color = 'white';\n                    }\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, there is wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n\n                if (shouldWrap) {\n                  let tempColor = model.board.grid[0][col].color; \n\n                  for (let r = 0; r < model.board.grid.length - 1; r++) {\n                    model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                  }\n                  for (let r = 0; r < model.ninjaRow; r++) {\n                    if (model.board.grid[r][col].color !== 'white' && model.board.grid[r][col].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n\n                  model.board.grid[model.board.grid.length - 1][col].color = tempColor;\n\n                  if (tempColor !== 'white' && tempColor !== undefined) {\n                    affectedSquares++;\n                  }\n\n                  for (let r = model.board.grid.length - 1; r > model.ninjaRow; r--) {\n                    if (r === model.board.grid.length - 1) {\n                      continue;\n                    }\n                    if (model.board.grid[r][col].color !== 'white' && model.board.grid[r][col].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n\n                }\n              }\n\n            }\n            //moves ninjase up\n            model.ninjaRow--;\n\n            model.numMoves++;\n          }\n          break;\n\n\n        case \"Right\":\n          if (model.ninjaColumn !== model.config.numColumns - 2) {\n            for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n              let row = model.ninjaRow + rowOffset;\n              let rightColor = model.board.grid[row][model.ninjaColumn + 2].color; // +2 to get the column to the right of the ninja\n              let shouldWrap = false;\n\n              if (rightColor === undefined || rightColor === 'white') {\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the column to the right of the ninja\n                for (let col = model.ninjaColumn + 2; col < model.config.numColumns; col++) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    for (let c = col; c > model.ninjaColumn + 1; c--) {\n                      model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                      affectedSquares++;\n                    }\n                    model.board.grid[row][model.ninjaColumn + 1].color = undefined;\n                    break;\n                  }\n                }\n\n                // If no white cell is found, wrap\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n\n                if (shouldWrap) {\n                  let tempColor = model.board.grid[row][model.config.numColumns - 1].color; // Store the color of the rightmost block\n\n                  for (let c = model.config.numColumns - 1; c > 0; c--) {\n                    model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                  }\n\n\n                  model.board.grid[row][0].color = tempColor;\n\n                  for (let c = model.ninjaColumn + 2; c < model.config.numColumns; c++) {\n                    if (model.board.grid[row][c].color !== 'white' && model.board.grid[row][c].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n\n                  for (let c = model.ninjaColumn; c >= 0; c--) {\n                    if (model.board.grid[row][c].color !== 'white' && model.board.grid[row][c].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n\n                }\n              }\n            }\n\n            // Moves ninjase right\n            model.ninjaColumn++;\n\n            model.numMoves++;\n          }\n          break;\n        case \"Down\":\n          // Checks if ninjase is at the bottom\n          if (model.ninjaRow !== model.config.numRows - 2) {\n            // Checks if ninjase is at the bottom\n\n\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            // For each column below ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let belowColor = model.board.grid[model.ninjaRow + 2][col].color; // +2 to get the row below the 2x2 ninja\n              let shouldWrap = false;\n\n              if (belowColor === undefined || belowColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the row below the ninja downwards\n                for (let row = model.ninjaRow + 2; row < model.board.grid.length; row++) {\n                  if (model.board.grid[row][col].color === 'white' || model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    // Move all colored blocks down by one\n                    for (let r = row; r > model.ninjaRow + 1; r--) { // Note: r > model.ninjaRow + 1 to not overwrite the ninja itself\n                      affectedSquares++;\n                      model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                    }\n                    // Set the cell immediately below the ninja to white\n                    model.board.grid[model.ninjaRow + 1][col].color = undefined;\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n\n                if (shouldWrap) {\n                  // Perform wrapping\n                  let tempColor = model.board.grid[model.board.grid.length - 1][col].color; // Store the color of the bottom block\n\n                  // Shift every block up by one\n                  for (let r = model.board.grid.length - 1; r > 0; r--) {\n                    model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                  }\n                  for (let r = model.board.grid.length - 1; r > model.ninjaRow + 1; r--) {\n                    if (model.board.grid[r][col].color !== 'white' && model.board.grid[r][col].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n\n\n                  // Place the bottom block color at the top\n                  model.board.grid[0][col].color = tempColor;\n\n                  for (let r = 0; r <= model.ninjaRow; r++) {\n                    if (model.board.grid[r][col].color !== 'white' && model.board.grid[r][col].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n                }\n              }\n            }\n\n            // Moves ninjase down\n            model.ninjaRow++;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Left\":\n          if (model.ninjaColumn !== 0) {\n\n            // For each row in the ninja's 2x2 area\n            for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n              let row = model.ninjaRow + rowOffset;\n              let leftColor = model.board.grid[row][model.ninjaColumn - 1].color; // -1 to get the column to the left of the ninja\n              let shouldWrap = false;\n\n              if (leftColor === undefined || leftColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the column immediately to the left of the ninja\n                for (let col = model.ninjaColumn - 1; col >= 0; col--) {\n                  if (model.board.grid[row][col].color === undefined || model.board.grid[row][col].color === 'white') {\n                    foundWhite = true;\n                    // Move all colored blocks to the right by one\n                    for (let c = col; c < model.ninjaColumn; c++) {\n                      model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n                      if (model.board.grid[row][c + 1].color !== 'white' && model.board.grid[row][c + 1].color !== undefined) {\n                        affectedSquares++; // Only count the square if it's not white or undefined\n                    }\n                      \n                    }\n                    // Set the cell immediately to the left of the ninja to white\n                    model.board.grid[row][model.ninjaColumn].color = undefined;\n                    break;\n                  }\n                }\n\n                // If no white cell is found, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n\n                if (shouldWrap) {\n                  // Perform wrapping for the row\n                  let tempColor = model.board.grid[row][0].color; // Store the color of the leftmost block\n\n                  // Shift every block in the row right by one\n                  for (let c = 0; c < model.config.numColumns - 1; c++) {\n                    model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n                  }\n\n                  // Place the leftmost block color at the end of the row\n                  model.board.grid[row][model.config.numColumns - 1].color = tempColor;\n                \n                  // Count affected squares to the left of the ninja's original position (since they get pushed left due to wrapping)\n                  for (let c = model.ninjaColumn - 2; c >= 0; c--) {\n                    if (model.board.grid[row][c].color !== 'white' && model.board.grid[row][c].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n\n                  // Count affected squares to the right of ninja, this will not include the ninja's current or previous column\n                  for (let c = model.ninjaColumn; c < model.config.numColumns; c++) {\n                    if (model.board.grid[row][c].color !== 'white' && model.board.grid[row][c].color !== undefined) {\n                      affectedSquares++;\n                    }\n                  }\n                  \n                }\n              }\n            }\n\n            // Moves ninjase left\n            model.ninjaColumn--;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n      }\n      model.score += affectedSquares;\n      forceRedraw(redraw + 1);\n    }\n\n\n    // model.board.grid[1][3].color = 'red'\n    //forceRedraw(redraw+1)   // react to changes, if model has changed.\n  }\n\n//---------------------------------------------------------------------------------------------\n  function ChangeConfig(config) {\n    const newModel = new Model(config);\n    setModel(newModel);\n  }\n\n  function ResetConfig(config) {\n    let num = 0;\n    if (config === config_4x4) {\n      num = 1;\n    } else if (config === config_5x5) {\n      num = 0;\n    } else {\n      num = 2;\n    }\n    const newModel = new Model(num);\n    setModel(newModel);\n  }\n\n\n  //------------------------------------------------------------------------------------------\n\n\n  function removeSelection() {\n    let clusters = find2x2Cluster(model.board.size, model.board.grid, model)\n    if (clusters === null) {\n      return;\n    } else {\n      for (clusters of clusters) {\n        remove2x2Block(clusters.row, clusters.column, model)\n        model.numMoves++;\n        model.score += 4;\n      }\n    }\n    \n    forceRedraw(redraw + 1);\n  }\n\n  return (\n    <div className=\"App\" ref={appRef}>\n      <canvas tabIndex=\"1\"\n        data-testid=\"canvas\"\n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={500}\n        height={500}\n      />\n\n\n\n      <div style={layout.scaling}>\n        <label data-testid=\"score-label\" style={layout.score}>{\"Score: \" + model.score}</label>\n        <label data-testid=\"moves-label\" style={layout.text}>{\"Number of Moves: \" + model.numMoves}</label>\n        <button className=\"Config1\" data-testid=\"Config1\" style={layout.Config1} onClick={(e) => ChangeConfig(0)}   >Config 1</button>\n        <button className=\"Config2\" data-testid=\"Config2\" style={layout.Config2} onClick={(e) => ChangeConfig(1)}  >Config 2</button>\n        <button className=\"Config3\" data-testid=\"Config3\" style={layout.Config3} onClick={(e) => ChangeConfig(2)}   >Config 3</button>\n\n        <button className=\"Reset\" data-testid=\"Reset\" style={layout.Reset} onClick={(e) => ResetConfig(model.config)}   >Reset</button>\n        {isWon(model) ? (<label data-testid=\"victory-label\" style={layout.victory}>YOU WIN CONGRATULATIONS!</label>) : null}\n        <button className=\"Remove\" data-testid=\"Remove\" style={layout.Remove} onClick={() => removeSelection()}>Remove</button>\n        {!isWon(model) ? (<div style={layout.buttons}>\n          <button className=\"upbutton\" data-testid=\"upbutton\" style={layout.upbutton} onClick={(e) => moveNinjaSe(\"Up\")}       >UP</button>\n          <button className=\"leftbutton\" data-testid=\"leftbutton\" style={layout.leftbutton} onClick={(e) => moveNinjaSe(\"Left\")}   >LEFT</button>\n          <button className=\"rightbutton\" data-testid=\"rightbutton\" style={layout.rightbutton} onClick={(e) => moveNinjaSe(\"Right\")}  >RIGHT</button>\n          <button className=\"downbutton\" data-testid=\"downbutton\" style={layout.downbutton} onClick={(e) => moveNinjaSe(\"Down\")}   >DOWN</button>\n        </div>) : null}\n      </div>\n      <img id=\"ninjase\" src={ninjase} alt=\"hidden\" hidden></img>\n    </div>\n  );\n\n}\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}