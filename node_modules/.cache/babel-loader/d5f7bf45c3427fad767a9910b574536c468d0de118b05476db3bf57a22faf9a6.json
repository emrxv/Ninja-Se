{"ast":null,"code":"import { config_4x4, config_5x5, config_6x6 } from \"./config\";\n\n// someone needs to know about these configurations. Perhaps we should!\nconst configs = [config_5x5, config_4x4, config_6x6];\n\n// wouldn't it be useful to have a Square class?\nexport class Square {\n  constructor(row, column) {\n    this.row = row;\n    this.column = column;\n  }\n}\nexport class Board {\n  constructor(size) {\n    this.size = size;\n    this.grid = Array.from(Array(size), () => new Array(size));\n    for (let r = 0; r < size; r++) {\n      for (let c = 0; c < size; c++) {\n        this.grid[r][c] = new Square(r, c);\n      }\n    }\n\n    // how you access a square by its [row][column] location\n    // this.grid[2][4]\n  }\n}\n\n// a method that might be useful\nexport function isWon(model) {\n  // Assuming the model has a property 'board' which has a 'grid' which is a 2D array.\n  for (let row = 0; row < model.board.grid.length; row++) {\n    for (let column = 0; column < model.board.grid[row].length; column++) {\n      var _model$board$grid$row;\n      // Get the color of the current square.\n      const color = (_model$board$grid$row = model.board.grid[row][column]) === null || _model$board$grid$row === void 0 ? void 0 : _model$board$grid$row.color;\n      // Check if the color is not white and is defined.\n      if (color && color.toLowerCase() !== 'white') {\n        // If any square is not white or undefined, return false.\n        return false;\n      }\n    }\n  }\n  // If all squares are white or undefined, return true.\n  return true;\n}\nexport function find2x2ClusterContainingClick(boardSize, grid, model) {\n  let clusters = []; // Initialize an array to hold the top-left corners of each 2x2 cluster\n\n  // Loop over the board to find all 2x2 clusters\n  for (let r = 0; r < boardSize - 1; r++) {\n    for (let c = 0; c < boardSize - 1; c++) {\n      var _grid$r$c, _grid$r, _grid$c, _grid;\n      // Check if the current 2x2 block is of the same color\n      const color = (_grid$r$c = grid[r][c]) === null || _grid$r$c === void 0 ? void 0 : _grid$r$c.color;\n      if (color &&\n      // Make sure the color is not white/undefined\n      ((_grid$r = grid[r][c + 1]) === null || _grid$r === void 0 ? void 0 : _grid$r.color) === color && ((_grid$c = grid[r + 1][c]) === null || _grid$c === void 0 ? void 0 : _grid$c.color) === color && ((_grid = grid[r + 1][c + 1]) === null || _grid === void 0 ? void 0 : _grid.color) === color) {\n        // We found a 2x2 cluster of the same color\n        clusters.push({\n          row: r,\n          column: c\n        }); // Add the top-left corner of the cluster to the array\n        console.log(clusters);\n        return clusters;\n      }\n    }\n  }\n\n  // If no cluster contains the click, return null\n  return null;\n}\n\n// Remove a 2x2 block by changing its color to white\nexport function remove2x2Block(row, column, model) {\n  if (row !== null && column !== null) {\n    for (let r = row; r < row + 2; r++) {\n      for (let c = column; c < column + 2; c++) {\n        model.board.grid[r][c].color = undefined;\n      }\n    }\n  }\n}\nexport default class Model {\n  // info is going to be JSON-encoded puzzle\n\n  // 'which' is an integer 0..1..2 which selects configuration you can use.\n  constructor(which) {\n    this.config = configs[which];\n    this.ninjaRow = this.config.ninjaRow - 1;\n    this.ninjaColumn = this.config.ninjaColumn.charCodeAt(0) - 'A'.charCodeAt(0);\n    this.size = Number(this.config.numColumns);\n    this.board = new Board(this.size);\n    this.selectionrow = null;\n    this.selectioncol = null;\n    this.numMoves = 0;\n    this.score = 0;\n    console.log(this.config);\n    for (let info of this.config.initial) {\n      console.log(info);\n      //info will be ... {\"color\" : \"red\", \"row\" : \"1\", \"column\" : \"D\"},\n      let row = Number(info.row) - 1;\n      let column = info.column.charCodeAt(0) - 'A'.charCodeAt(0);\n      this.board.grid[row][column].color = info.color;\n    }\n  }\n}","map":{"version":3,"names":["config_4x4","config_5x5","config_6x6","configs","Square","constructor","row","column","Board","size","grid","Array","from","r","c","isWon","model","board","length","_model$board$grid$row","color","toLowerCase","find2x2ClusterContainingClick","boardSize","clusters","_grid$r$c","_grid$r","_grid$c","_grid","push","console","log","remove2x2Block","undefined","Model","which","config","ninjaRow","ninjaColumn","charCodeAt","Number","numColumns","selectionrow","selectioncol","numMoves","score","info","initial"],"sources":["/Users/emresunar/Documents/CS3733/IProj/starter/src/model/Model.js"],"sourcesContent":["import { config_4x4, config_5x5, config_6x6 } from \"./config\";\n\n// someone needs to know about these configurations. Perhaps we should!\nconst configs = [config_5x5, config_4x4, config_6x6]\n\n\n// wouldn't it be useful to have a Square class?\nexport class Square {\n    constructor(row, column) {\n        this.row = row\n        this.column = column\n    }\n}\n\nexport class Board {\n    constructor(size) {\n        this.size = size\n\n        this.grid = Array.from(Array(size), () => new Array(size));\n\n        for (let r = 0; r < size; r++) {\n            for (let c = 0; c < size; c++) {\n                this.grid[r][c] = new Square(r, c)\n            }\n        }\n\n        // how you access a square by its [row][column] location\n        // this.grid[2][4]\n    }\n\n\n}\n\n// a method that might be useful\nexport function isWon(model) {\n    // Assuming the model has a property 'board' which has a 'grid' which is a 2D array.\n    for (let row = 0; row < model.board.grid.length; row++) {\n        for (let column = 0; column < model.board.grid[row].length; column++) {\n            // Get the color of the current square.\n            const color = model.board.grid[row][column]?.color;\n            // Check if the color is not white and is defined.\n            if (color && color.toLowerCase() !== 'white') {\n                // If any square is not white or undefined, return false.\n                return false;\n            }\n        }\n    }\n    // If all squares are white or undefined, return true.\n    return true;\n}\n\nexport function find2x2ClusterContainingClick(boardSize, grid, model) {\n    let clusters = []; // Initialize an array to hold the top-left corners of each 2x2 cluster\n\n    // Loop over the board to find all 2x2 clusters\n    for (let r = 0; r < boardSize - 1; r++) {\n        for (let c = 0; c < boardSize - 1; c++) {\n            // Check if the current 2x2 block is of the same color\n            const color = grid[r][c]?.color;\n            if (color && // Make sure the color is not white/undefined\n                grid[r][c + 1]?.color === color &&\n                grid[r + 1][c]?.color === color &&\n                grid[r + 1][c + 1]?.color === color) {\n\n                // We found a 2x2 cluster of the same color\n                clusters.push({ row: r, column: c }); // Add the top-left corner of the cluster to the array\n                console.log(clusters)\n                return clusters;\n            }\n        }\n    }\n\n    // If no cluster contains the click, return null\n    return null;\n}\n\n// Remove a 2x2 block by changing its color to white\nexport function remove2x2Block(row, column, model) {\n    if (row !== null && column !== null) {\n        for (let r = row; r < row + 2; r++) {\n            for (let c = column; c < column + 2; c++) {\n                model.board.grid[r][c].color = undefined;\n            }\n        }\n    }\n}\n\n\nexport default class Model {\n    // info is going to be JSON-encoded puzzle\n\n    // 'which' is an integer 0..1..2 which selects configuration you can use.\n    constructor(which) {\n        this.config = configs[which]\n        this.ninjaRow = this.config.ninjaRow - 1\n        this.ninjaColumn = (this.config.ninjaColumn.charCodeAt(0) - 'A'.charCodeAt(0))\n\n\n        this.size = Number(this.config.numColumns)\n        this.board = new Board(this.size)\n        this.selectionrow = null\n        this.selectioncol = null\n\n        this.numMoves = 0;\n        this.score = 0;\n\n        console.log(this.config)\n        for (let info of this.config.initial) {\n            console.log(info)\n            //info will be ... {\"color\" : \"red\", \"row\" : \"1\", \"column\" : \"D\"},\n            let row = Number(info.row) - 1\n            let column = info.column.charCodeAt(0) - 'A'.charCodeAt(0)\n            this.board.grid[row][column].color = info.color\n\n\n        }\n    }\n\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}