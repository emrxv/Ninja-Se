{"ast":null,"code":"import React from 'react';\nimport './App.css';\nimport ninjase from './ninjase.svg';\nimport Model from './model/Model.js';\nimport { redrawCanvas } from './boundary/Boundary.js';\n\n// controller to handle moving\nconst moveNinjaSe = direction => {\n  const ninjaSeSize = 2;\n  let ninjaSePosition = null;\n  for (let r = 0; r < model.board.grid.length; r++) {\n    for (let c = 0; c < model.board.grid[r].length; c++) {\n      if (model.board.grid[r][c].color === 'pink') {\n        if (r + 1 < model.board.grid.length && c + 1 < model.board.grid[r].length && model.board.grid[r + 1][c].color === 'pink' && model.board.grid[r][c + 1].color === 'pink') {\n          ninjaSePosition = {\n            row: r,\n            col: c\n          };\n          break;\n        }\n      }\n    }\n    if (ninjaSePosition) break;\n  }\n  if (!ninjaSePosition) {\n    return;\n  }\n  switch (direction) {\n    case \"Up\":\n      if (ninjaSePosition.row > 0) {\n        for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n          for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n            model.board.grid[r][c].color = 'white';\n          }\n        }\n        ninjaSePosition.row--;\n        for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n          for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n            model.board.grid[r][c].color = 'pink';\n          }\n        }\n        model.numMoves++;\n        forceRedraw(redraw + 1);\n      }\n      break;\n    case \"Right\":\n      if (ninjaSePosition.col + ninjaSeSize < model.board.grid[0].length) {\n        for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n          for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n            model.board.grid[r][c].color = 'white';\n          }\n        }\n        ninjaSePosition.col++;\n        for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n          for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n            model.board.grid[r][c].color = 'pink';\n          }\n        }\n        model.numMoves++;\n        forceRedraw(redraw + 1);\n      }\n      break;\n    case \"Down\":\n      if (ninjaSePosition.row + ninjaSeSize < model.board.grid.length) {\n        for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n          for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n            model.board.grid[r][c].color = 'white';\n          }\n        }\n        ninjaSePosition.row++;\n        for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n          for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n            model.board.grid[r][c].color = 'pink';\n          }\n        }\n        model.numMoves++;\n        forceRedraw(redraw + 1);\n      }\n      break;\n    case \"Left\":\n      if (ninjaSePosition.col > 0) {\n        for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n          for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n            model.board.grid[r][c].color = 'white';\n          }\n        }\n        ninjaSePosition.col--;\n        for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n          for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n            model.board.grid[r][c].color = 'pink';\n          }\n        }\n        model.numMoves++;\n        forceRedraw(redraw + 1);\n      }\n      break;\n  }\n\n  // model.board.grid[1][3].color = 'red'\n  //forceRedraw(redraw+1)   // react to changes, if model has changed.\n};","map":{"version":3,"names":["React","ninjase","Model","redrawCanvas","moveNinjaSe","direction","ninjaSeSize","ninjaSePosition","r","model","board","grid","length","c","color","row","col","numMoves","forceRedraw","redraw"],"sources":["/Users/emresunar/Documents/CS3733/IProj/starter/src/Ninjase.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\nimport ninjase from './ninjase.svg'\nimport Model from './model/Model.js';\nimport { redrawCanvas } from './boundary/Boundary.js'\n\n\n  // controller to handle moving\n  const moveNinjaSe = (direction) => {\n\n    const ninjaSeSize = 2; \n    let ninjaSePosition = null;\n\n    for (let r = 0; r < model.board.grid.length; r++) {\n        for (let c = 0; c < model.board.grid[r].length; c++) {\n            if (model.board.grid[r][c].color === 'pink') {\n                if (\n                    r + 1 < model.board.grid.length &&\n                    c + 1 < model.board.grid[r].length &&\n                    model.board.grid[r + 1][c].color === 'pink' &&\n                    model.board.grid[r][c + 1].color === 'pink'\n                ) {\n                    ninjaSePosition = { row: r, col: c };\n                    break;\n                }\n            }\n        }\n        if (ninjaSePosition) break;\n    }\n\n    if (!ninjaSePosition) {\n        return;\n    }\n\n    switch (direction) {\n        case \"Up\":\n            if (ninjaSePosition.row > 0) {\n                for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n                    for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n                        model.board.grid[r][c].color = 'white'\n                    }\n                }\n                ninjaSePosition.row--;\n                for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n                    for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n                        model.board.grid[r][c].color = 'pink'\n                    }\n                }\n                model.numMoves++;\n                forceRedraw(redraw + 1)\n            }\n            break;\n        case \"Right\":\n          if (ninjaSePosition.col + ninjaSeSize < model.board.grid[0].length) {\n\n            for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n                for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n                    model.board.grid[r][c].color = 'white'; \n                }\n            }\n\n            ninjaSePosition.col++;\n\n            for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n                for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n                    model.board.grid[r][c].color = 'pink';\n                }\n            }\n            model.numMoves++;\n            forceRedraw(redraw + 1);\n        }\n            break;\n        case \"Down\":\n          if (ninjaSePosition.row + ninjaSeSize < model.board.grid.length) {\n\n            for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n                for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n                    model.board.grid[r][c].color = 'white'; \n                }\n            }\n\n            ninjaSePosition.row++;\n\n            for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n                for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n                    model.board.grid[r][c].color = 'pink';\n                }\n            }\n            model.numMoves++;\n            forceRedraw(redraw + 1);\n        }\n            break;\n        case \"Left\":\n          if (ninjaSePosition.col > 0) {\n\n            for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n                for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n                    model.board.grid[r][c].color = 'white'; \n                }\n            }\n\n            ninjaSePosition.col--;\n\n            for (let r = ninjaSePosition.row; r < ninjaSePosition.row + ninjaSeSize; r++) {\n                for (let c = ninjaSePosition.col; c < ninjaSePosition.col + ninjaSeSize; c++) {\n                    model.board.grid[r][c].color = 'pink';\n                }\n            }\n            model.numMoves++;\n            forceRedraw(redraw + 1);\n        }\n            break;\n    }\n\n   // model.board.grid[1][3].color = 'red'\n   //forceRedraw(redraw+1)   // react to changes, if model has changed.\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}