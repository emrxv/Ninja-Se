{"ast":null,"code":"var _jsxFileName = \"/Users/emresunar/Documents/CS3733/IProj/starter/src/App.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport './App.css';\nimport ninjase from './ninjase.svg';\nimport Model from './model/Model.js';\nimport Board from './model/Model.js';\nimport { isWon } from './model/Model.js';\nimport { redrawCanvas } from './boundary/Boundary.js';\nimport { layout } from './Layout.js';\nimport { config_4x4, config_5x5 } from './model/config';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // initial instantiation of the Model\n  const [model, setModel] = React.useState(new Model(0)); // only place where Model object is instantiated.\n  const [redraw, forceRedraw] = React.useState(0); // change values to force redraw\n\n  const appRef = React.useRef(null); // Later need to be able to refer to App \n  const canvasRef = React.useRef(null); // Later need to be able to refer to Canvas\n\n  /** Ensures initial rendering is performed, and that whenever model changes, it is re-rendered. */\n  React.useEffect(() => {\n    /** Happens once. */\n    // selection(model, )\n    redrawCanvas(model, canvasRef.current, appRef.current);\n  }, [model, redraw]); // this second argument is CRITICAL, since it declares when to refresh (whenever Model changes)\n\n  // controller to handle moving\n  const moveNinjaSe = direction => {\n    if (!Board.isWon) {\n      switch (direction) {\n        case \"Up\":\n          //Checks if ninjase is at top\n          if (model.ninjaRow >= 1) {\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            //for each column above ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let aboveColor = model.board.grid[model.ninjaRow - 1][col].color;\n              let shouldWrap = false;\n              if (aboveColor === undefined || aboveColor === 'white') {\n                continue;\n              } else {\n                let foundWhite = false;\n                for (let row = model.ninjaRow - 1; row >= 0; row--) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    for (let r = row; r < model.ninjaRow - 1; r++) {\n                      model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                      model.board.grid[r + 1][col].color = 'white';\n                    }\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  // Both blocks in the top are colored and not white, perform wrapping\n                  let tempColor = model.board.grid[0][col].color; // Store the color of the top block\n\n                  // Shift every block down by one\n                  for (let r = 0; r < model.board.grid.length - 1; r++) {\n                    model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                  }\n\n                  // Place the top block color at the bottom\n                  model.board.grid[model.board.grid.length - 1][col].color = tempColor;\n                }\n              }\n            }\n            //moves ninjase up\n            model.ninjaRow--;\n\n            // increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Right\":\n          if (model.ninjaColumn !== model.config.numColumns - 2) {\n            // For each row in the ninja's 2x2 area\n            for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n              let row = model.ninjaRow + rowOffset;\n              let rightColor = model.board.grid[row][model.ninjaColumn + 2].color; // +2 to get the column to the right of the ninja\n              let shouldWrap = false;\n              if (rightColor === undefined || rightColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the column to the right of the ninja\n                for (let col = model.ninjaColumn + 2; col < model.config.numColumns; col++) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    // Move all colored blocks left by one\n                    for (let c = col; c > model.ninjaColumn + 1; c--) {\n                      model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                    }\n                    // Set the cell immediately to the right of the ninja to white\n                    model.board.grid[row][model.ninjaColumn + 1].color = undefined;\n                    break;\n                  }\n                }\n\n                // If no white cell is found, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  // Perform wrapping for the row\n                  let tempColor = model.board.grid[row][model.config.numColumns - 1].color; // Store the color of the rightmost block\n\n                  // Shift every block in the row left by one\n                  for (let c = model.config.numColumns - 1; c > 0; c--) {\n                    model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                  }\n\n                  // Place the rightmost block color at the start of the row\n                  model.board.grid[row][0].color = tempColor;\n                }\n              }\n            }\n\n            // Moves ninjase right\n            model.ninjaColumn++;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Down\":\n          // Checks if ninjase is at the bottom\n          if (model.ninjaRow !== model.config.numRows - 2) {\n            // Checks if ninjase is at the bottom\n\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            // For each column below ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let belowColor = model.board.grid[model.ninjaRow + 2][col].color; // +2 to get the row below the 2x2 ninja\n              let shouldWrap = false;\n              if (belowColor === undefined || belowColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the row below the ninja downwards\n                for (let row = model.ninjaRow + 2; row < model.board.grid.length; row++) {\n                  if (model.board.grid[row][col].color === 'white') {\n                    foundWhite = true;\n                    // Move all colored blocks down by one\n                    for (let r = row; r > model.ninjaRow + 1; r--) {\n                      // Note: r > model.ninjaRow + 1 to not overwrite the ninja itself\n                      model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                    }\n                    // Set the cell immediately below the ninja to white\n                    model.board.grid[model.ninjaRow + 1][col].color = 'white';\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  // Perform wrapping\n                  let tempColor = model.board.grid[model.board.grid.length - 1][col].color; // Store the color of the bottom block\n\n                  // Shift every block up by one\n                  for (let r = model.board.grid.length - 1; r > 0; r--) {\n                    model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                  }\n\n                  // Place the bottom block color at the top\n                  model.board.grid[0][col].color = tempColor;\n                }\n              }\n            }\n\n            // Moves ninjase down\n            model.ninjaRow++;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Left\":\n          if (model.ninjaColumn !== 0) {\n            // For each row in the ninja's 2x2 area\n            for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n              let row = model.ninjaRow + rowOffset;\n              let leftColor = model.board.grid[row][model.ninjaColumn - 1].color; // -1 to get the column to the left of the ninja\n              let shouldWrap = false;\n              if (leftColor === undefined || leftColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the column immediately to the left of the ninja\n                for (let col = model.ninjaColumn - 1; col >= 0; col--) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    // Move all colored blocks to the right by one\n                    for (let c = col; c < model.ninjaColumn; c++) {\n                      model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n                    }\n                    // Set the cell immediately to the left of the ninja to white\n                    model.board.grid[row][model.ninjaColumn].color = undefined;\n                    break;\n                  }\n                }\n\n                // If no white cell is found, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n                if (shouldWrap) {\n                  // Perform wrapping for the row\n                  let tempColor = model.board.grid[row][0].color; // Store the color of the leftmost block\n\n                  // Shift every block in the row right by one\n                  for (let c = 0; c < model.config.numColumns - 1; c++) {\n                    model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n                  }\n\n                  // Place the leftmost block color at the end of the row\n                  model.board.grid[row][model.config.numColumns - 1].color = tempColor;\n                }\n              }\n            }\n\n            // Moves ninjase left\n            model.ninjaColumn--;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n      }\n      forceRedraw(redraw + 1);\n    }\n\n    // model.board.grid[1][3].color = 'red'\n    //forceRedraw(redraw+1)   // react to changes, if model has changed.\n  };\n\n  function ChangeConfig(config) {\n    const newModel = new Model(config);\n    setModel(newModel);\n  }\n  function ResetConfig(config) {\n    let num = 0;\n    if (config === config_4x4) {\n      num = 1;\n    } else if (config === config_5x5) {\n      num = 0;\n    } else {\n      num = 2;\n    }\n    const newModel = new Model(num);\n    setModel(newModel);\n  }\n\n  //------------------------------------------------------------------------------------------\n\n  function getClickedRowAndColumn(event) {\n    // Logic to determine the clicked row and column based on the event coordinates.\n    // This will vary based on how you have set up your canvas and rendering.\n    return {\n      row: 0,\n      column: 0\n    }; // Replace with actual values\n  }\n\n  document.addEventListener('DOMContentLoaded', function () {\n    const removeButton = document.getElementById('removeButton');\n    const canvas = document.getElementById('gameCanvas');\n\n    // Listener for clicks on the canvas to select squares\n    canvas.addEventListener('click', function (event) {\n      const {\n        row,\n        column\n      } = getClickedRowAndColumn(event);\n      const selectedSquares = selection(model, row, column);\n      // Here you could highlight the squares on the canvas or update the model to indicate a selection\n    });\n\n    // Listener for the remove button\n    removeButton.addEventListener('click', function () {\n      // Assume 'selectedSquares' is available and contains the currently selected squares\n      remove(selectedSquares);\n\n      // Re-render the canvas or update the display to reflect the changes\n      renderGameCanvas(); // You'll need a function to update the canvas display\n    });\n  });\n\n  function selection(model, clickedRow, clickedColumn) {\n    let selectedTopLeftSquare = null;\n    let selectedSquares = [];\n\n    // Iterate through the grid to find a 2x2 area with the same color\n    for (let rowIndex = 0; rowIndex < model.board.grid.length - 1; rowIndex++) {\n      for (let colIndex = 0; colIndex < model.board.grid[rowIndex].length - 1; colIndex++) {\n        // Check if we're within bounds to have a 2x2 area\n        if (model.board.grid[rowIndex][colIndex].color === model.board.grid[rowIndex][colIndex + 1].color && model.board.grid[rowIndex][colIndex].color === model.board.grid[rowIndex + 1][colIndex].color && model.board.grid[rowIndex][colIndex].color === model.board.grid[rowIndex + 1][colIndex + 1].color) {\n          // Check if the clicked location is within the 2x2 area of the same color\n          if (clickedRow >= rowIndex && clickedRow <= rowIndex + 1 && clickedColumn >= colIndex && clickedColumn <= colIndex + 1) {\n            selectedTopLeftSquare = model.board.grid[rowIndex][colIndex];\n            selectedSquares = [model.board.grid[rowIndex][colIndex], model.board.grid[rowIndex][colIndex + 1], model.board.grid[rowIndex + 1][colIndex], model.board.grid[rowIndex + 1][colIndex + 1]];\n            // Exit both loops since we found our selection\n            return selectedSquares;\n          }\n        }\n      }\n    }\n\n    // Return null or empty array if no selection is made\n    return null;\n  }\n  function remove(selection) {\n    // Check if selection is valid (not null or empty)\n    if (selection && selection.length === 4) {\n      // Iterate over the selection and set each square's color to white\n      selection.forEach(square => {\n        square.color = 'white';\n      });\n    }\n  }\n  const handleCanvasClick = event => {\n    // Calculate clicked position\n    const {\n      row,\n      column\n    } = getClickedPosition(event);\n    // Update the current selection\n    setCurrentSelection(selection(model, row, column));\n  };\n\n  // Remove function wrapped for React\n  const removeSelection = () => {\n    if (currentSelection) {\n      remove(model, currentSelection); // Assumes remove modifies the model and returns a new one\n      forceRedraw(redraw + 1);\n      setCurrentSelection(null); // Clear the selection\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    ref: appRef,\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      tabIndex: \"1\",\n      \"data-testid\": \"canvas\",\n      className: \"App-canvas\",\n      ref: canvasRef,\n      width: 500,\n      height: 500\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: layout.scaling,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        \"data-testid\": \"moves-label\",\n        style: layout.text,\n        children: \"number moves: \" + model.numMoves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Config1\",\n        \"data-testid\": \"Config1\",\n        style: layout.Config1,\n        onClick: e => ChangeConfig(0),\n        children: \"Config 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Config2\",\n        \"data-testid\": \"Config2\",\n        style: layout.Config2,\n        onClick: e => ChangeConfig(1),\n        children: \"Config 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 398,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Config3\",\n        \"data-testid\": \"Config3\",\n        style: layout.Config3,\n        onClick: e => ChangeConfig(2),\n        children: \"Config 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Reset\",\n        \"data-testid\": \"Reset\",\n        style: layout.Reset,\n        onClick: e => ResetConfig(model.config),\n        children: \"Reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"Remove\",\n        \"data-testid\": \"Remove\",\n        style: layout.Remove,\n        onClick: e => removeSelection,\n        children: \"Remove\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: layout.buttons,\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"upbutton\",\n          \"data-testid\": \"upbutton\",\n          style: layout.upbutton,\n          onClick: e => moveNinjaSe(\"Up\"),\n          children: \"UP\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 404,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"leftbutton\",\n          \"data-testid\": \"leftbutton\",\n          style: layout.leftbutton,\n          onClick: e => moveNinjaSe(\"Left\"),\n          children: \"LEFT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 405,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"rightbutton\",\n          \"data-testid\": \"rightbutton\",\n          style: layout.rightbutton,\n          onClick: e => moveNinjaSe(\"Right\"),\n          children: \"RIGHT\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"downbutton\",\n          \"data-testid\": \"downbutton\",\n          style: layout.downbutton,\n          onClick: e => moveNinjaSe(\"Down\"),\n          children: \"DOWN\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      id: \"ninjase\",\n      src: ninjase,\n      alt: \"hidden\",\n      hidden: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 410,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"hjqSLNayM3DeZaL/BO+A2eMkUtY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","ninjase","Model","Board","isWon","redrawCanvas","layout","config_4x4","config_5x5","jsxDEV","_jsxDEV","App","_s","model","setModel","useState","redraw","forceRedraw","appRef","useRef","canvasRef","useEffect","current","moveNinjaSe","direction","ninjaRow","ninjaAnchorColumn","ninjaColumn","colOffset","col","aboveColor","board","grid","color","shouldWrap","undefined","foundWhite","row","r","tempColor","length","numMoves","config","numColumns","rowOffset","rightColor","c","numRows","belowColor","leftColor","ChangeConfig","newModel","ResetConfig","num","getClickedRowAndColumn","event","column","document","addEventListener","removeButton","getElementById","canvas","selectedSquares","selection","remove","renderGameCanvas","clickedRow","clickedColumn","selectedTopLeftSquare","rowIndex","colIndex","forEach","square","handleCanvasClick","getClickedPosition","setCurrentSelection","removeSelection","currentSelection","className","ref","children","tabIndex","width","height","fileName","_jsxFileName","lineNumber","columnNumber","style","scaling","text","Config1","onClick","e","Config2","Config3","Reset","Remove","buttons","upbutton","leftbutton","rightbutton","downbutton","id","src","alt","hidden","_c","$RefreshReg$"],"sources":["/Users/emresunar/Documents/CS3733/IProj/starter/src/App.js"],"sourcesContent":["import React from 'react';\nimport './App.css';\nimport ninjase from './ninjase.svg'\nimport Model from './model/Model.js';\nimport Board from './model/Model.js'\nimport { isWon } from './model/Model.js'\nimport { redrawCanvas } from './boundary/Boundary.js'\nimport { layout } from './Layout.js'\nimport { config_4x4, config_5x5 } from './model/config';\n\nfunction App() {\n  // initial instantiation of the Model\n  const [model, setModel] = React.useState(new Model(0));  // only place where Model object is instantiated.\n  const [redraw, forceRedraw] = React.useState(0);    // change values to force redraw\n\n  const appRef = React.useRef(null);      // Later need to be able to refer to App \n  const canvasRef = React.useRef(null);   // Later need to be able to refer to Canvas\n\n\n  /** Ensures initial rendering is performed, and that whenever model changes, it is re-rendered. */\n  React.useEffect(() => {\n    /** Happens once. */\n   // selection(model, )\n    redrawCanvas(model, canvasRef.current, appRef.current);\n  }, [model, redraw])   // this second argument is CRITICAL, since it declares when to refresh (whenever Model changes)\n\n  // controller to handle moving\n  const moveNinjaSe = (direction) => {\n\n    if (!Board.isWon) {\n      switch (direction) {\n        case \"Up\":\n          //Checks if ninjase is at top\n          if (model.ninjaRow >= 1) {\n\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            //for each column above ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let aboveColor = model.board.grid[model.ninjaRow - 1][col].color;\n              let shouldWrap = false;\n\n              if (aboveColor === undefined || aboveColor === 'white') {\n                continue;\n              } else {\n                let foundWhite = false;\n\n                for (let row = model.ninjaRow - 1; row >= 0; row--) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    for (let r = row; r < model.ninjaRow - 1; r++) {\n                      model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                      model.board.grid[r + 1][col].color = 'white';\n                    }\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n\n                if (shouldWrap) {\n                  // Both blocks in the top are colored and not white, perform wrapping\n                  let tempColor = model.board.grid[0][col].color; // Store the color of the top block\n\n                  // Shift every block down by one\n                  for (let r = 0; r < model.board.grid.length - 1; r++) {\n                    model.board.grid[r][col].color = model.board.grid[r + 1][col].color;\n                  }\n\n                  // Place the top block color at the bottom\n                  model.board.grid[model.board.grid.length - 1][col].color = tempColor;\n\n                }\n              }\n\n            }\n            //moves ninjase up\n            model.ninjaRow--;\n\n            // increment moves\n            model.numMoves++;\n          }\n          break;\n\n\n        case \"Right\":\n          if (model.ninjaColumn !== model.config.numColumns - 2) {\n            // For each row in the ninja's 2x2 area\n            for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n              let row = model.ninjaRow + rowOffset;\n              let rightColor = model.board.grid[row][model.ninjaColumn + 2].color; // +2 to get the column to the right of the ninja\n              let shouldWrap = false;\n\n              if (rightColor === undefined || rightColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the column to the right of the ninja\n                for (let col = model.ninjaColumn + 2; col < model.config.numColumns; col++) {\n                  if (model.board.grid[row][col].color === undefined) {\n                    foundWhite = true;\n                    // Move all colored blocks left by one\n                    for (let c = col; c > model.ninjaColumn + 1; c--) {\n                      model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                    }\n                    // Set the cell immediately to the right of the ninja to white\n                    model.board.grid[row][model.ninjaColumn + 1].color = undefined;\n                    break;\n                  }\n                }\n\n                // If no white cell is found, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n\n                if (shouldWrap) {\n                  // Perform wrapping for the row\n                  let tempColor = model.board.grid[row][model.config.numColumns - 1].color; // Store the color of the rightmost block\n\n                  // Shift every block in the row left by one\n                  for (let c = model.config.numColumns - 1; c > 0; c--) {\n                    model.board.grid[row][c].color = model.board.grid[row][c - 1].color;\n                  }\n\n                  // Place the rightmost block color at the start of the row\n                  model.board.grid[row][0].color = tempColor;\n                }\n              }\n            }\n\n            // Moves ninjase right\n            model.ninjaColumn++;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Down\":\n          // Checks if ninjase is at the bottom\n          if (model.ninjaRow !== model.config.numRows - 2) {\n            // Checks if ninjase is at the bottom\n\n\n            let ninjaAnchorColumn = model.ninjaColumn;\n\n            // For each column below ninjase\n            for (let colOffset = 0; colOffset < 2; colOffset++) {\n              let col = ninjaAnchorColumn + colOffset;\n              let belowColor = model.board.grid[model.ninjaRow + 2][col].color; // +2 to get the row below the 2x2 ninja\n              let shouldWrap = false;\n\n              if (belowColor === undefined || belowColor === 'white') {\n                // Skip if out of bounds (undefined)\n                continue;\n              } else {\n                let foundWhite = false;\n\n                // Start checking from the row below the ninja downwards\n                for (let row = model.ninjaRow + 2; row < model.board.grid.length; row++) {\n                  if (model.board.grid[row][col].color === 'white') {\n                    foundWhite = true;\n                    // Move all colored blocks down by one\n                    for (let r = row; r > model.ninjaRow + 1; r--) { // Note: r > model.ninjaRow + 1 to not overwrite the ninja itself\n                      model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                    }\n                    // Set the cell immediately below the ninja to white\n                    model.board.grid[model.ninjaRow + 1][col].color = 'white';\n                    break;\n                  }\n                }\n\n                // If the loop finished without finding a white cell, trigger wrapping\n                if (!foundWhite) {\n                  shouldWrap = true;\n                }\n\n                if (shouldWrap) {\n                  // Perform wrapping\n                  let tempColor = model.board.grid[model.board.grid.length - 1][col].color; // Store the color of the bottom block\n\n                  // Shift every block up by one\n                  for (let r = model.board.grid.length - 1; r > 0; r--) {\n                    model.board.grid[r][col].color = model.board.grid[r - 1][col].color;\n                  }\n\n                  // Place the bottom block color at the top\n                  model.board.grid[0][col].color = tempColor;\n                }\n              }\n            }\n\n            // Moves ninjase down\n            model.ninjaRow++;\n\n            // Increment moves\n            model.numMoves++;\n          }\n          break;\n        case \"Left\":\n          if (model.ninjaColumn !== 0) {\n\n    // For each row in the ninja's 2x2 area\n    for (let rowOffset = 0; rowOffset < 2; rowOffset++) {\n      let row = model.ninjaRow + rowOffset;\n      let leftColor = model.board.grid[row][model.ninjaColumn - 1].color; // -1 to get the column to the left of the ninja\n      let shouldWrap = false;\n\n      if (leftColor === undefined || leftColor === 'white') {\n        // Skip if out of bounds (undefined)\n        continue;\n      } else {\n        let foundWhite = false;\n\n        // Start checking from the column immediately to the left of the ninja\n        for (let col = model.ninjaColumn - 1; col >= 0; col--) {\n          if (model.board.grid[row][col].color === undefined) {\n            foundWhite = true;\n            // Move all colored blocks to the right by one\n            for (let c = col; c < model.ninjaColumn; c++) {\n              model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n            }\n            // Set the cell immediately to the left of the ninja to white\n            model.board.grid[row][model.ninjaColumn].color = undefined;\n            break;\n          }\n        }\n\n        // If no white cell is found, trigger wrapping\n        if (!foundWhite) {\n          shouldWrap = true;\n        }\n\n        if (shouldWrap) {\n          // Perform wrapping for the row\n          let tempColor = model.board.grid[row][0].color; // Store the color of the leftmost block\n\n          // Shift every block in the row right by one\n          for (let c = 0; c < model.config.numColumns - 1; c++) {\n            model.board.grid[row][c].color = model.board.grid[row][c + 1].color;\n          }\n\n          // Place the leftmost block color at the end of the row\n          model.board.grid[row][model.config.numColumns - 1].color = tempColor;\n        }\n      }\n    }\n\n    // Moves ninjase left\n    model.ninjaColumn--;\n\n    // Increment moves\n    model.numMoves++;\n  }\n  break;\n      }\n      forceRedraw(redraw + 1);\n    }\n\n\n    // model.board.grid[1][3].color = 'red'\n    //forceRedraw(redraw+1)   // react to changes, if model has changed.\n  }\n\n\n  function ChangeConfig(config) {\n    const newModel = new Model(config);\n    setModel(newModel);\n  }\n\n  function ResetConfig(config) {\n    let num = 0;\n    if (config === config_4x4) {\n      num = 1;\n    } else if (config === config_5x5) {\n      num = 0;\n    } else {\n      num = 2;\n    }\n    const newModel = new Model(num);\n    setModel(newModel);\n  }\n\n\n//------------------------------------------------------------------------------------------\n\n\n  function getClickedRowAndColumn(event) {\n    // Logic to determine the clicked row and column based on the event coordinates.\n    // This will vary based on how you have set up your canvas and rendering.\n    return { row: 0, column: 0 }; // Replace with actual values\n}\n\ndocument.addEventListener('DOMContentLoaded', function() {\n  const removeButton = document.getElementById('removeButton');\n  const canvas = document.getElementById('gameCanvas');\n\n  // Listener for clicks on the canvas to select squares\n  canvas.addEventListener('click', function(event) {\n      const { row, column } = getClickedRowAndColumn(event);\n      const selectedSquares = selection(model, row, column);\n      // Here you could highlight the squares on the canvas or update the model to indicate a selection\n  });\n\n  // Listener for the remove button\n  removeButton.addEventListener('click', function() {\n      // Assume 'selectedSquares' is available and contains the currently selected squares\n      remove(selectedSquares);\n\n      // Re-render the canvas or update the display to reflect the changes\n      renderGameCanvas(); // You'll need a function to update the canvas display\n  });\n});\n\n  function selection(model, clickedRow, clickedColumn) {\n    let selectedTopLeftSquare = null;\n    let selectedSquares = [];\n  \n    // Iterate through the grid to find a 2x2 area with the same color\n    for (let rowIndex = 0; rowIndex < model.board.grid.length - 1; rowIndex++) {\n      for (let colIndex = 0; colIndex < model.board.grid[rowIndex].length - 1; colIndex++) {\n        // Check if we're within bounds to have a 2x2 area\n        if (model.board.grid[rowIndex][colIndex].color === model.board.grid[rowIndex][colIndex + 1].color &&\n            model.board.grid[rowIndex][colIndex].color === model.board.grid[rowIndex + 1][colIndex].color &&\n            model.board.grid[rowIndex][colIndex].color === model.board.grid[rowIndex + 1][colIndex + 1].color) {\n          \n          // Check if the clicked location is within the 2x2 area of the same color\n          if (clickedRow >= rowIndex && clickedRow <= rowIndex + 1 &&\n              clickedColumn >= colIndex && clickedColumn <= colIndex + 1) {\n            selectedTopLeftSquare = model.board.grid[rowIndex][colIndex];\n            selectedSquares = [\n              model.board.grid[rowIndex][colIndex],\n              model.board.grid[rowIndex][colIndex + 1],\n              model.board.grid[rowIndex + 1][colIndex],\n              model.board.grid[rowIndex + 1][colIndex + 1]\n            ];\n            // Exit both loops since we found our selection\n            return selectedSquares;\n          }\n        }\n      }\n    }\n  \n    // Return null or empty array if no selection is made\n    return null;\n  }\n  \n\n  function remove(selection) {\n    // Check if selection is valid (not null or empty)\n    if (selection && selection.length === 4) {\n      // Iterate over the selection and set each square's color to white\n      selection.forEach(square => {\n        square.color = 'white';\n      });\n    }\n  }\n\n  const handleCanvasClick = (event) => {\n    // Calculate clicked position\n    const { row, column } = getClickedPosition(event);\n    // Update the current selection\n    setCurrentSelection(selection(model, row, column));\n};\n\n// Remove function wrapped for React\nconst removeSelection = () => {\n    if (currentSelection) {\n        remove(model, currentSelection); // Assumes remove modifies the model and returns a new one\n        forceRedraw(redraw + 1);\n        setCurrentSelection(null); // Clear the selection\n    }\n};\n  \n\n\n  return (\n    <div className=\"App\" ref={appRef}>\n      <canvas tabIndex=\"1\"\n        data-testid=\"canvas\"\n        className=\"App-canvas\"\n        ref={canvasRef}\n        width={500}\n        height={500}\n      />\n\n\n\n      <div style={layout.scaling}>\n        <label data-testid=\"moves-label\" style={layout.text}>{\"number moves: \" + model.numMoves}</label>\n        <button className=\"Config1\" data-testid=\"Config1\" style={layout.Config1} onClick={(e) => ChangeConfig(0)}   >Config 1</button>\n        <button className=\"Config2\" data-testid=\"Config2\" style={layout.Config2} onClick={(e) => ChangeConfig(1)}  >Config 2</button>\n        <button className=\"Config3\" data-testid=\"Config3\" style={layout.Config3} onClick={(e) => ChangeConfig(2)}   >Config 3</button>\n\n        <button className=\"Reset\" data-testid=\"Reset\" style={layout.Reset} onClick={(e) => ResetConfig(model.config)}   >Reset</button>\n        <button className=\"Remove\" data-testid=\"Remove\" style={layout.Remove} onClick={(e) => removeSelection}   >Remove</button>\n        <div style={layout.buttons}>\n          <button className=\"upbutton\" data-testid=\"upbutton\" style={layout.upbutton} onClick={(e) => moveNinjaSe(\"Up\")}       >UP</button>\n          <button className=\"leftbutton\" data-testid=\"leftbutton\" style={layout.leftbutton} onClick={(e) => moveNinjaSe(\"Left\")}   >LEFT</button>\n          <button className=\"rightbutton\" data-testid=\"rightbutton\" style={layout.rightbutton} onClick={(e) => moveNinjaSe(\"Right\")}  >RIGHT</button>\n          <button className=\"downbutton\" data-testid=\"downbutton\" style={layout.downbutton} onClick={(e) => moveNinjaSe(\"Down\")}   >DOWN</button>\n        </div>\n      </div>\n      <img id=\"ninjase\" src={ninjase} alt=\"hidden\" hidden></img>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,WAAW;AAClB,OAAOC,OAAO,MAAM,eAAe;AACnC,OAAOC,KAAK,MAAM,kBAAkB;AACpC,OAAOC,KAAK,MAAM,kBAAkB;AACpC,SAASC,KAAK,QAAQ,kBAAkB;AACxC,SAASC,YAAY,QAAQ,wBAAwB;AACrD,SAASC,MAAM,QAAQ,aAAa;AACpC,SAASC,UAAU,EAAEC,UAAU,QAAQ,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,KAAK,CAACe,QAAQ,CAAC,IAAIb,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;EACzD,MAAM,CAACc,MAAM,EAAEC,WAAW,CAAC,GAAGjB,KAAK,CAACe,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAI;;EAEpD,MAAMG,MAAM,GAAGlB,KAAK,CAACmB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAM;EACxC,MAAMC,SAAS,GAAGpB,KAAK,CAACmB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAG;;EAGxC;EACAnB,KAAK,CAACqB,SAAS,CAAC,MAAM;IACpB;IACD;IACChB,YAAY,CAACQ,KAAK,EAAEO,SAAS,CAACE,OAAO,EAAEJ,MAAM,CAACI,OAAO,CAAC;EACxD,CAAC,EAAE,CAACT,KAAK,EAAEG,MAAM,CAAC,CAAC,EAAG;;EAEtB;EACA,MAAMO,WAAW,GAAIC,SAAS,IAAK;IAEjC,IAAI,CAACrB,KAAK,CAACC,KAAK,EAAE;MAChB,QAAQoB,SAAS;QACf,KAAK,IAAI;UACP;UACA,IAAIX,KAAK,CAACY,QAAQ,IAAI,CAAC,EAAE;YAEvB,IAAIC,iBAAiB,GAAGb,KAAK,CAACc,WAAW;;YAEzC;YACA,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAG,CAAC,EAAEA,SAAS,EAAE,EAAE;cAClD,IAAIC,GAAG,GAAGH,iBAAiB,GAAGE,SAAS;cACvC,IAAIE,UAAU,GAAGjB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACnB,KAAK,CAACY,QAAQ,GAAG,CAAC,CAAC,CAACI,GAAG,CAAC,CAACI,KAAK;cAChE,IAAIC,UAAU,GAAG,KAAK;cAEtB,IAAIJ,UAAU,KAAKK,SAAS,IAAIL,UAAU,KAAK,OAAO,EAAE;gBACtD;cACF,CAAC,MAAM;gBACL,IAAIM,UAAU,GAAG,KAAK;gBAEtB,KAAK,IAAIC,GAAG,GAAGxB,KAAK,CAACY,QAAQ,GAAG,CAAC,EAAEY,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;kBAClD,IAAIxB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACR,GAAG,CAAC,CAACI,KAAK,KAAKE,SAAS,EAAE;oBAClDC,UAAU,GAAG,IAAI;oBACjB,KAAK,IAAIE,CAAC,GAAGD,GAAG,EAAEC,CAAC,GAAGzB,KAAK,CAACY,QAAQ,GAAG,CAAC,EAAEa,CAAC,EAAE,EAAE;sBAC7CzB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACM,CAAC,CAAC,CAACT,GAAG,CAAC,CAACI,KAAK,GAAGpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACM,CAAC,GAAG,CAAC,CAAC,CAACT,GAAG,CAAC,CAACI,KAAK;sBACnEpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACM,CAAC,GAAG,CAAC,CAAC,CAACT,GAAG,CAAC,CAACI,KAAK,GAAG,OAAO;oBAC9C;oBACA;kBACF;gBACF;;gBAEA;gBACA,IAAI,CAACG,UAAU,EAAE;kBACfF,UAAU,GAAG,IAAI;gBACnB;gBAEA,IAAIA,UAAU,EAAE;kBACd;kBACA,IAAIK,SAAS,GAAG1B,KAAK,CAACkB,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,CAACH,GAAG,CAAC,CAACI,KAAK,CAAC,CAAC;;kBAEhD;kBACA,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGzB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACQ,MAAM,GAAG,CAAC,EAAEF,CAAC,EAAE,EAAE;oBACpDzB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACM,CAAC,CAAC,CAACT,GAAG,CAAC,CAACI,KAAK,GAAGpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACM,CAAC,GAAG,CAAC,CAAC,CAACT,GAAG,CAAC,CAACI,KAAK;kBACrE;;kBAEA;kBACApB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACnB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACQ,MAAM,GAAG,CAAC,CAAC,CAACX,GAAG,CAAC,CAACI,KAAK,GAAGM,SAAS;gBAEtE;cACF;YAEF;YACA;YACA1B,KAAK,CAACY,QAAQ,EAAE;;YAEhB;YACAZ,KAAK,CAAC4B,QAAQ,EAAE;UAClB;UACA;QAGF,KAAK,OAAO;UACV,IAAI5B,KAAK,CAACc,WAAW,KAAKd,KAAK,CAAC6B,MAAM,CAACC,UAAU,GAAG,CAAC,EAAE;YACrD;YACA,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAG,CAAC,EAAEA,SAAS,EAAE,EAAE;cAClD,IAAIP,GAAG,GAAGxB,KAAK,CAACY,QAAQ,GAAGmB,SAAS;cACpC,IAAIC,UAAU,GAAGhC,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACxB,KAAK,CAACc,WAAW,GAAG,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC;cACrE,IAAIC,UAAU,GAAG,KAAK;cAEtB,IAAIW,UAAU,KAAKV,SAAS,IAAIU,UAAU,KAAK,OAAO,EAAE;gBACtD;gBACA;cACF,CAAC,MAAM;gBACL,IAAIT,UAAU,GAAG,KAAK;;gBAEtB;gBACA,KAAK,IAAIP,GAAG,GAAGhB,KAAK,CAACc,WAAW,GAAG,CAAC,EAAEE,GAAG,GAAGhB,KAAK,CAAC6B,MAAM,CAACC,UAAU,EAAEd,GAAG,EAAE,EAAE;kBAC1E,IAAIhB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACR,GAAG,CAAC,CAACI,KAAK,KAAKE,SAAS,EAAE;oBAClDC,UAAU,GAAG,IAAI;oBACjB;oBACA,KAAK,IAAIU,CAAC,GAAGjB,GAAG,EAAEiB,CAAC,GAAGjC,KAAK,CAACc,WAAW,GAAG,CAAC,EAAEmB,CAAC,EAAE,EAAE;sBAChDjC,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACS,CAAC,CAAC,CAACb,KAAK,GAAGpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACS,CAAC,GAAG,CAAC,CAAC,CAACb,KAAK;oBACrE;oBACA;oBACApB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACxB,KAAK,CAACc,WAAW,GAAG,CAAC,CAAC,CAACM,KAAK,GAAGE,SAAS;oBAC9D;kBACF;gBACF;;gBAEA;gBACA,IAAI,CAACC,UAAU,EAAE;kBACfF,UAAU,GAAG,IAAI;gBACnB;gBAEA,IAAIA,UAAU,EAAE;kBACd;kBACA,IAAIK,SAAS,GAAG1B,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACxB,KAAK,CAAC6B,MAAM,CAACC,UAAU,GAAG,CAAC,CAAC,CAACV,KAAK,CAAC,CAAC;;kBAE1E;kBACA,KAAK,IAAIa,CAAC,GAAGjC,KAAK,CAAC6B,MAAM,CAACC,UAAU,GAAG,CAAC,EAAEG,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;oBACpDjC,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACS,CAAC,CAAC,CAACb,KAAK,GAAGpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACS,CAAC,GAAG,CAAC,CAAC,CAACb,KAAK;kBACrE;;kBAEA;kBACApB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAAC,CAAC,CAAC,CAACJ,KAAK,GAAGM,SAAS;gBAC5C;cACF;YACF;;YAEA;YACA1B,KAAK,CAACc,WAAW,EAAE;;YAEnB;YACAd,KAAK,CAAC4B,QAAQ,EAAE;UAClB;UACA;QACF,KAAK,MAAM;UACT;UACA,IAAI5B,KAAK,CAACY,QAAQ,KAAKZ,KAAK,CAAC6B,MAAM,CAACK,OAAO,GAAG,CAAC,EAAE;YAC/C;;YAGA,IAAIrB,iBAAiB,GAAGb,KAAK,CAACc,WAAW;;YAEzC;YACA,KAAK,IAAIC,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAG,CAAC,EAAEA,SAAS,EAAE,EAAE;cAClD,IAAIC,GAAG,GAAGH,iBAAiB,GAAGE,SAAS;cACvC,IAAIoB,UAAU,GAAGnC,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACnB,KAAK,CAACY,QAAQ,GAAG,CAAC,CAAC,CAACI,GAAG,CAAC,CAACI,KAAK,CAAC,CAAC;cAClE,IAAIC,UAAU,GAAG,KAAK;cAEtB,IAAIc,UAAU,KAAKb,SAAS,IAAIa,UAAU,KAAK,OAAO,EAAE;gBACtD;gBACA;cACF,CAAC,MAAM;gBACL,IAAIZ,UAAU,GAAG,KAAK;;gBAEtB;gBACA,KAAK,IAAIC,GAAG,GAAGxB,KAAK,CAACY,QAAQ,GAAG,CAAC,EAAEY,GAAG,GAAGxB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACQ,MAAM,EAAEH,GAAG,EAAE,EAAE;kBACvE,IAAIxB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACR,GAAG,CAAC,CAACI,KAAK,KAAK,OAAO,EAAE;oBAChDG,UAAU,GAAG,IAAI;oBACjB;oBACA,KAAK,IAAIE,CAAC,GAAGD,GAAG,EAAEC,CAAC,GAAGzB,KAAK,CAACY,QAAQ,GAAG,CAAC,EAAEa,CAAC,EAAE,EAAE;sBAAE;sBAC/CzB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACM,CAAC,CAAC,CAACT,GAAG,CAAC,CAACI,KAAK,GAAGpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACM,CAAC,GAAG,CAAC,CAAC,CAACT,GAAG,CAAC,CAACI,KAAK;oBACrE;oBACA;oBACApB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACnB,KAAK,CAACY,QAAQ,GAAG,CAAC,CAAC,CAACI,GAAG,CAAC,CAACI,KAAK,GAAG,OAAO;oBACzD;kBACF;gBACF;;gBAEA;gBACA,IAAI,CAACG,UAAU,EAAE;kBACfF,UAAU,GAAG,IAAI;gBACnB;gBAEA,IAAIA,UAAU,EAAE;kBACd;kBACA,IAAIK,SAAS,GAAG1B,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACnB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACQ,MAAM,GAAG,CAAC,CAAC,CAACX,GAAG,CAAC,CAACI,KAAK,CAAC,CAAC;;kBAE1E;kBACA,KAAK,IAAIK,CAAC,GAAGzB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACQ,MAAM,GAAG,CAAC,EAAEF,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;oBACpDzB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACM,CAAC,CAAC,CAACT,GAAG,CAAC,CAACI,KAAK,GAAGpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACM,CAAC,GAAG,CAAC,CAAC,CAACT,GAAG,CAAC,CAACI,KAAK;kBACrE;;kBAEA;kBACApB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,CAACH,GAAG,CAAC,CAACI,KAAK,GAAGM,SAAS;gBAC5C;cACF;YACF;;YAEA;YACA1B,KAAK,CAACY,QAAQ,EAAE;;YAEhB;YACAZ,KAAK,CAAC4B,QAAQ,EAAE;UAClB;UACA;QACF,KAAK,MAAM;UACT,IAAI5B,KAAK,CAACc,WAAW,KAAK,CAAC,EAAE;YAEnC;YACA,KAAK,IAAIiB,SAAS,GAAG,CAAC,EAAEA,SAAS,GAAG,CAAC,EAAEA,SAAS,EAAE,EAAE;cAClD,IAAIP,GAAG,GAAGxB,KAAK,CAACY,QAAQ,GAAGmB,SAAS;cACpC,IAAIK,SAAS,GAAGpC,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACxB,KAAK,CAACc,WAAW,GAAG,CAAC,CAAC,CAACM,KAAK,CAAC,CAAC;cACpE,IAAIC,UAAU,GAAG,KAAK;cAEtB,IAAIe,SAAS,KAAKd,SAAS,IAAIc,SAAS,KAAK,OAAO,EAAE;gBACpD;gBACA;cACF,CAAC,MAAM;gBACL,IAAIb,UAAU,GAAG,KAAK;;gBAEtB;gBACA,KAAK,IAAIP,GAAG,GAAGhB,KAAK,CAACc,WAAW,GAAG,CAAC,EAAEE,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;kBACrD,IAAIhB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACR,GAAG,CAAC,CAACI,KAAK,KAAKE,SAAS,EAAE;oBAClDC,UAAU,GAAG,IAAI;oBACjB;oBACA,KAAK,IAAIU,CAAC,GAAGjB,GAAG,EAAEiB,CAAC,GAAGjC,KAAK,CAACc,WAAW,EAAEmB,CAAC,EAAE,EAAE;sBAC5CjC,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACS,CAAC,CAAC,CAACb,KAAK,GAAGpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACS,CAAC,GAAG,CAAC,CAAC,CAACb,KAAK;oBACrE;oBACA;oBACApB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACxB,KAAK,CAACc,WAAW,CAAC,CAACM,KAAK,GAAGE,SAAS;oBAC1D;kBACF;gBACF;;gBAEA;gBACA,IAAI,CAACC,UAAU,EAAE;kBACfF,UAAU,GAAG,IAAI;gBACnB;gBAEA,IAAIA,UAAU,EAAE;kBACd;kBACA,IAAIK,SAAS,GAAG1B,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAAC,CAAC,CAAC,CAACJ,KAAK,CAAC,CAAC;;kBAEhD;kBACA,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjC,KAAK,CAAC6B,MAAM,CAACC,UAAU,GAAG,CAAC,EAAEG,CAAC,EAAE,EAAE;oBACpDjC,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACS,CAAC,CAAC,CAACb,KAAK,GAAGpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACS,CAAC,GAAG,CAAC,CAAC,CAACb,KAAK;kBACrE;;kBAEA;kBACApB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACK,GAAG,CAAC,CAACxB,KAAK,CAAC6B,MAAM,CAACC,UAAU,GAAG,CAAC,CAAC,CAACV,KAAK,GAAGM,SAAS;gBACtE;cACF;YACF;;YAEA;YACA1B,KAAK,CAACc,WAAW,EAAE;;YAEnB;YACAd,KAAK,CAAC4B,QAAQ,EAAE;UAClB;UACA;MACI;MACAxB,WAAW,CAACD,MAAM,GAAG,CAAC,CAAC;IACzB;;IAGA;IACA;EACF,CAAC;;EAGD,SAASkC,YAAYA,CAACR,MAAM,EAAE;IAC5B,MAAMS,QAAQ,GAAG,IAAIjD,KAAK,CAACwC,MAAM,CAAC;IAClC5B,QAAQ,CAACqC,QAAQ,CAAC;EACpB;EAEA,SAASC,WAAWA,CAACV,MAAM,EAAE;IAC3B,IAAIW,GAAG,GAAG,CAAC;IACX,IAAIX,MAAM,KAAKnC,UAAU,EAAE;MACzB8C,GAAG,GAAG,CAAC;IACT,CAAC,MAAM,IAAIX,MAAM,KAAKlC,UAAU,EAAE;MAChC6C,GAAG,GAAG,CAAC;IACT,CAAC,MAAM;MACLA,GAAG,GAAG,CAAC;IACT;IACA,MAAMF,QAAQ,GAAG,IAAIjD,KAAK,CAACmD,GAAG,CAAC;IAC/BvC,QAAQ,CAACqC,QAAQ,CAAC;EACpB;;EAGF;;EAGE,SAASG,sBAAsBA,CAACC,KAAK,EAAE;IACrC;IACA;IACA,OAAO;MAAElB,GAAG,EAAE,CAAC;MAAEmB,MAAM,EAAE;IAAE,CAAC,CAAC,CAAC;EAClC;;EAEAC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAW;IACvD,MAAMC,YAAY,GAAGF,QAAQ,CAACG,cAAc,CAAC,cAAc,CAAC;IAC5D,MAAMC,MAAM,GAAGJ,QAAQ,CAACG,cAAc,CAAC,YAAY,CAAC;;IAEpD;IACAC,MAAM,CAACH,gBAAgB,CAAC,OAAO,EAAE,UAASH,KAAK,EAAE;MAC7C,MAAM;QAAElB,GAAG;QAAEmB;MAAO,CAAC,GAAGF,sBAAsB,CAACC,KAAK,CAAC;MACrD,MAAMO,eAAe,GAAGC,SAAS,CAAClD,KAAK,EAAEwB,GAAG,EAAEmB,MAAM,CAAC;MACrD;IACJ,CAAC,CAAC;;IAEF;IACAG,YAAY,CAACD,gBAAgB,CAAC,OAAO,EAAE,YAAW;MAC9C;MACAM,MAAM,CAACF,eAAe,CAAC;;MAEvB;MACAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;IACxB,CAAC,CAAC;EACJ,CAAC,CAAC;;EAEA,SAASF,SAASA,CAAClD,KAAK,EAAEqD,UAAU,EAAEC,aAAa,EAAE;IACnD,IAAIC,qBAAqB,GAAG,IAAI;IAChC,IAAIN,eAAe,GAAG,EAAE;;IAExB;IACA,KAAK,IAAIO,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGxD,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACQ,MAAM,GAAG,CAAC,EAAE6B,QAAQ,EAAE,EAAE;MACzE,KAAK,IAAIC,QAAQ,GAAG,CAAC,EAAEA,QAAQ,GAAGzD,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,CAAC,CAAC7B,MAAM,GAAG,CAAC,EAAE8B,QAAQ,EAAE,EAAE;QACnF;QACA,IAAIzD,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,CAAC,CAACC,QAAQ,CAAC,CAACrC,KAAK,KAAKpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,CAAC,CAACC,QAAQ,GAAG,CAAC,CAAC,CAACrC,KAAK,IAC7FpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,CAAC,CAACC,QAAQ,CAAC,CAACrC,KAAK,KAAKpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAACrC,KAAK,IAC7FpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,CAAC,CAACC,QAAQ,CAAC,CAACrC,KAAK,KAAKpB,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,GAAG,CAAC,CAAC,CAACC,QAAQ,GAAG,CAAC,CAAC,CAACrC,KAAK,EAAE;UAErG;UACA,IAAIiC,UAAU,IAAIG,QAAQ,IAAIH,UAAU,IAAIG,QAAQ,GAAG,CAAC,IACpDF,aAAa,IAAIG,QAAQ,IAAIH,aAAa,IAAIG,QAAQ,GAAG,CAAC,EAAE;YAC9DF,qBAAqB,GAAGvD,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,CAAC,CAACC,QAAQ,CAAC;YAC5DR,eAAe,GAAG,CAChBjD,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,CAAC,CAACC,QAAQ,CAAC,EACpCzD,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,CAAC,CAACC,QAAQ,GAAG,CAAC,CAAC,EACxCzD,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,EACxCzD,KAAK,CAACkB,KAAK,CAACC,IAAI,CAACqC,QAAQ,GAAG,CAAC,CAAC,CAACC,QAAQ,GAAG,CAAC,CAAC,CAC7C;YACD;YACA,OAAOR,eAAe;UACxB;QACF;MACF;IACF;;IAEA;IACA,OAAO,IAAI;EACb;EAGA,SAASE,MAAMA,CAACD,SAAS,EAAE;IACzB;IACA,IAAIA,SAAS,IAAIA,SAAS,CAACvB,MAAM,KAAK,CAAC,EAAE;MACvC;MACAuB,SAAS,CAACQ,OAAO,CAACC,MAAM,IAAI;QAC1BA,MAAM,CAACvC,KAAK,GAAG,OAAO;MACxB,CAAC,CAAC;IACJ;EACF;EAEA,MAAMwC,iBAAiB,GAAIlB,KAAK,IAAK;IACnC;IACA,MAAM;MAAElB,GAAG;MAAEmB;IAAO,CAAC,GAAGkB,kBAAkB,CAACnB,KAAK,CAAC;IACjD;IACAoB,mBAAmB,CAACZ,SAAS,CAAClD,KAAK,EAAEwB,GAAG,EAAEmB,MAAM,CAAC,CAAC;EACtD,CAAC;;EAED;EACA,MAAMoB,eAAe,GAAGA,CAAA,KAAM;IAC1B,IAAIC,gBAAgB,EAAE;MAClBb,MAAM,CAACnD,KAAK,EAAEgE,gBAAgB,CAAC,CAAC,CAAC;MACjC5D,WAAW,CAACD,MAAM,GAAG,CAAC,CAAC;MACvB2D,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;IAC/B;EACJ,CAAC;;EAIC,oBACEjE,OAAA;IAAKoE,SAAS,EAAC,KAAK;IAACC,GAAG,EAAE7D,MAAO;IAAA8D,QAAA,gBAC/BtE,OAAA;MAAQuE,QAAQ,EAAC,GAAG;MAClB,eAAY,QAAQ;MACpBH,SAAS,EAAC,YAAY;MACtBC,GAAG,EAAE3D,SAAU;MACf8D,KAAK,EAAE,GAAI;MACXC,MAAM,EAAE;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC,eAIF7E,OAAA;MAAK8E,KAAK,EAAElF,MAAM,CAACmF,OAAQ;MAAAT,QAAA,gBACzBtE,OAAA;QAAO,eAAY,aAAa;QAAC8E,KAAK,EAAElF,MAAM,CAACoF,IAAK;QAAAV,QAAA,EAAE,gBAAgB,GAAGnE,KAAK,CAAC4B;MAAQ;QAAA2C,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAChG7E,OAAA;QAAQoE,SAAS,EAAC,SAAS;QAAC,eAAY,SAAS;QAACU,KAAK,EAAElF,MAAM,CAACqF,OAAQ;QAACC,OAAO,EAAGC,CAAC,IAAK3C,YAAY,CAAC,CAAC,CAAE;QAAA8B,QAAA,EAAI;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC9H7E,OAAA;QAAQoE,SAAS,EAAC,SAAS;QAAC,eAAY,SAAS;QAACU,KAAK,EAAElF,MAAM,CAACwF,OAAQ;QAACF,OAAO,EAAGC,CAAC,IAAK3C,YAAY,CAAC,CAAC,CAAE;QAAA8B,QAAA,EAAG;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC7H7E,OAAA;QAAQoE,SAAS,EAAC,SAAS;QAAC,eAAY,SAAS;QAACU,KAAK,EAAElF,MAAM,CAACyF,OAAQ;QAACH,OAAO,EAAGC,CAAC,IAAK3C,YAAY,CAAC,CAAC,CAAE;QAAA8B,QAAA,EAAI;MAAQ;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAE9H7E,OAAA;QAAQoE,SAAS,EAAC,OAAO;QAAC,eAAY,OAAO;QAACU,KAAK,EAAElF,MAAM,CAAC0F,KAAM;QAACJ,OAAO,EAAGC,CAAC,IAAKzC,WAAW,CAACvC,KAAK,CAAC6B,MAAM,CAAE;QAAAsC,QAAA,EAAI;MAAK;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC/H7E,OAAA;QAAQoE,SAAS,EAAC,QAAQ;QAAC,eAAY,QAAQ;QAACU,KAAK,EAAElF,MAAM,CAAC2F,MAAO;QAACL,OAAO,EAAGC,CAAC,IAAKjB,eAAgB;QAAAI,QAAA,EAAI;MAAM;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACzH7E,OAAA;QAAK8E,KAAK,EAAElF,MAAM,CAAC4F,OAAQ;QAAAlB,QAAA,gBACzBtE,OAAA;UAAQoE,SAAS,EAAC,UAAU;UAAC,eAAY,UAAU;UAACU,KAAK,EAAElF,MAAM,CAAC6F,QAAS;UAACP,OAAO,EAAGC,CAAC,IAAKtE,WAAW,CAAC,IAAI,CAAE;UAAAyD,QAAA,EAAQ;QAAE;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACjI7E,OAAA;UAAQoE,SAAS,EAAC,YAAY;UAAC,eAAY,YAAY;UAACU,KAAK,EAAElF,MAAM,CAAC8F,UAAW;UAACR,OAAO,EAAGC,CAAC,IAAKtE,WAAW,CAAC,MAAM,CAAE;UAAAyD,QAAA,EAAI;QAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACvI7E,OAAA;UAAQoE,SAAS,EAAC,aAAa;UAAC,eAAY,aAAa;UAACU,KAAK,EAAElF,MAAM,CAAC+F,WAAY;UAACT,OAAO,EAAGC,CAAC,IAAKtE,WAAW,CAAC,OAAO,CAAE;UAAAyD,QAAA,EAAG;QAAK;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eAC3I7E,OAAA;UAAQoE,SAAS,EAAC,YAAY;UAAC,eAAY,YAAY;UAACU,KAAK,EAAElF,MAAM,CAACgG,UAAW;UAACV,OAAO,EAAGC,CAAC,IAAKtE,WAAW,CAAC,MAAM,CAAE;UAAAyD,QAAA,EAAI;QAAI;UAAAI,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACpI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC,eACN7E,OAAA;MAAK6F,EAAE,EAAC,SAAS;MAACC,GAAG,EAAEvG,OAAQ;MAACwG,GAAG,EAAC,QAAQ;MAACC,MAAM;IAAA;MAAAtB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvD,CAAC;AAEV;AAAC3E,EAAA,CAlZQD,GAAG;AAAAgG,EAAA,GAAHhG,GAAG;AAoZZ,eAAeA,GAAG;AAAC,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}