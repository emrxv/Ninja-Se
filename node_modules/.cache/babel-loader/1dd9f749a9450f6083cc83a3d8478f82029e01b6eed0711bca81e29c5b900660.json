{"ast":null,"code":"import { config_4x4, config_5x5, config_6x6 } from \"./config\";\n\n// someone needs to know about these configurations. Perhaps we should!\nconst configs = [config_5x5, config_4x4, config_6x6];\n\n// wouldn't it be useful to have a Square class?\nexport class Square {\n  constructor(row, column) {\n    this.row = row;\n    this.column = column;\n  }\n}\nexport class Board {\n  constructor(size) {\n    this.size = size;\n    this.grid = Array.from(Array(size), () => new Array(size));\n    for (let r = 0; r < size; r++) {\n      for (let c = 0; c < size; c++) {\n        this.grid[r][c] = new Square(r, c);\n      }\n    }\n\n    // how you access a square by its [row][column] location\n    // this.grid[2][4]\n  }\n}\n\n// a method that might be useful\nexport function isWon(model) {\n  return false;\n}\nexport default class Model {\n  // info is going to be JSON-encoded puzzle\n\n  // 'which' is an integer 0..1..2 which selects configuration you can use.\n  constructor(which) {\n    this.config = configs[which];\n    this.ninjaRow = this.config.ninjaRow - 1;\n    this.ninjaColumn = this.config.ninjaColumn.charCodeAt(0) - 'A'.charCodeAt(0);\n    this.size = Number(this.config.numColumns);\n    this.board = new Board(this.size);\n    this.selectionrow = null;\n    this.selectioncol = null;\n    this.numMoves = 0;\n    console.log(this.config);\n    for (let info of this.config.initial) {\n      console.log(info);\n      //info will be ... {\"color\" : \"red\", \"row\" : \"1\", \"column\" : \"D\"},\n      let row = Number(info.row) - 1;\n      let column = info.column.charCodeAt(0) - 'A'.charCodeAt(0);\n      this.board.grid[row][column].color = info.color;\n    }\n  }\n}\nexport function find2x2ClusterContainingClick(row, column, boardSize, grid) {\n  let clusters = []; // Initialize an array to hold the top-left corners of each 2x2 cluster\n\n  // Loop over the board to find all 2x2 clusters\n  for (let r = 0; r < boardSize - 1; r++) {\n    for (let c = 0; c < boardSize - 1; c++) {\n      var _grid$r$c, _grid$r, _grid$c, _grid;\n      // Check if the current 2x2 block is of the same color\n      const color = (_grid$r$c = grid[r][c]) === null || _grid$r$c === void 0 ? void 0 : _grid$r$c.color;\n      if (color &&\n      // Make sure the color is not white/undefined\n      ((_grid$r = grid[r][c + 1]) === null || _grid$r === void 0 ? void 0 : _grid$r.color) === color && ((_grid$c = grid[r + 1][c]) === null || _grid$c === void 0 ? void 0 : _grid$c.color) === color && ((_grid = grid[r + 1][c + 1]) === null || _grid === void 0 ? void 0 : _grid.color) === color) {\n        // We found a 2x2 cluster of the same color\n        clusters.push({\n          row: r,\n          column: c\n        }); // Add the top-left corner of the cluster to the array\n      }\n    }\n  }\n\n  // Now, compare the found clusters to the user's click\n  for (let cluster of clusters) {\n    if (row >= cluster.row && row < cluster.row + 2 && column >= cluster.column && column < cluster.column + 2) {\n      for (let r = row; r < row + 2; r++) {\n        for (let c = column; c < column + 2; c++) {\n          this.model.board.grid[r][c].color = undefined;\n        }\n      }\n      return cluster; // Return the top-left corner of the cluster\n    }\n  }\n\n  // If no cluster contains the click, return null\n  return null;\n}","map":{"version":3,"names":["config_4x4","config_5x5","config_6x6","configs","Square","constructor","row","column","Board","size","grid","Array","from","r","c","isWon","model","Model","which","config","ninjaRow","ninjaColumn","charCodeAt","Number","numColumns","board","selectionrow","selectioncol","numMoves","console","log","info","initial","color","find2x2ClusterContainingClick","boardSize","clusters","_grid$r$c","_grid$r","_grid$c","_grid","push","cluster","undefined"],"sources":["/Users/emresunar/Documents/CS3733/IProj/starter/src/model/Model.js"],"sourcesContent":["import { config_4x4, config_5x5, config_6x6 } from \"./config\";\n\n// someone needs to know about these configurations. Perhaps we should!\nconst configs = [config_5x5, config_4x4, config_6x6]\n\n\n// wouldn't it be useful to have a Square class?\nexport class Square {\n    constructor(row, column) {\n        this.row = row\n        this.column = column\n    }\n}\n\nexport class Board {\n    constructor(size) {\n        this.size = size\n\n        this.grid = Array.from(Array(size), () => new Array(size));\n\n        for (let r = 0; r < size; r++) {\n            for (let c = 0; c < size; c++) {\n                this.grid[r][c] = new Square(r, c)\n            }\n        }\n\n        // how you access a square by its [row][column] location\n        // this.grid[2][4]\n    }\n\n    \n}\n\n// a method that might be useful\nexport function isWon(model) {\n\n    return false;\n}\n\n\n\nexport default class Model {\n    // info is going to be JSON-encoded puzzle\n\n    // 'which' is an integer 0..1..2 which selects configuration you can use.\n    constructor(which) {\n        this.config = configs[which]\n        this.ninjaRow = this.config.ninjaRow - 1\n        this.ninjaColumn = (this.config.ninjaColumn.charCodeAt(0) - 'A'.charCodeAt(0))\n\n\n        this.size = Number(this.config.numColumns)\n        this.board = new Board(this.size)\n        this.selectionrow = null\n        this.selectioncol = null\n\n        this.numMoves = 0;\n\n        console.log(this.config)\n        for (let info of this.config.initial) {\n            console.log(info)\n            //info will be ... {\"color\" : \"red\", \"row\" : \"1\", \"column\" : \"D\"},\n            let row = Number(info.row) - 1\n            let column = info.column.charCodeAt(0) - 'A'.charCodeAt(0)\n            this.board.grid[row][column].color = info.color\n\n        \n        }\n    }\n\n    \n}\n\n\nexport function find2x2ClusterContainingClick(row, column, boardSize, grid) {\n    let clusters = []; // Initialize an array to hold the top-left corners of each 2x2 cluster\n  \n    // Loop over the board to find all 2x2 clusters\n    for (let r = 0; r < boardSize - 1; r++) {\n      for (let c = 0; c < boardSize - 1; c++) {\n        // Check if the current 2x2 block is of the same color\n        const color = grid[r][c]?.color;\n        if (color && // Make sure the color is not white/undefined\n            grid[r][c + 1]?.color === color &&\n            grid[r + 1][c]?.color === color &&\n            grid[r + 1][c + 1]?.color === color) {\n          // We found a 2x2 cluster of the same color\n          clusters.push({ row: r, column: c }); // Add the top-left corner of the cluster to the array\n        }\n      }\n    }\n   \n    // Now, compare the found clusters to the user's click\n    for (let cluster of clusters) {\n      if (row >= cluster.row && row < cluster.row + 2 &&\n        column >= cluster.column && column < cluster.column + 2) {\n  \n          for (let r = row; r < row + 2; r++) {\n            for (let c = column; c < column + 2; c++) {\n                this.model.board.grid[r][c].color = undefined;\n            }\n        }\n        return cluster; // Return the top-left corner of the cluster\n      }\n    }\n  \n    // If no cluster contains the click, return null\n    return null;\n  }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}