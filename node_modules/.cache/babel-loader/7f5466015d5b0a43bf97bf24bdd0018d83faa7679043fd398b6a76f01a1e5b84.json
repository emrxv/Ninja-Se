{"ast":null,"code":"import { config_4x4, config_5x5, config_6x6 } from \"./config\";\n\n// someone needs to know about these configurations. Perhaps we should!\nconst configs = [config_5x5, config_4x4, config_6x6];\n\n// wouldn't it be useful to have a Square class?\nexport class Square {\n  constructor(row, column) {\n    this.row = row;\n    this.column = column;\n  }\n}\nexport class Board {\n  constructor(size) {\n    this.size = size;\n    this.grid = Array.from(Array(size), () => new Array(size));\n    for (let r = 0; r < size; r++) {\n      for (let c = 0; c < size; c++) {\n        this.grid[r][c] = new Square(r, c);\n      }\n    }\n\n    // how you access a square by its [row][column] location\n    // this.grid[2][4]\n  }\n}\n// a method that might be useful\nexport function isWon(model) {\n  let size = model.board.grid.size; // Assuming \"this\" refers to the Model object\n\n  for (let r = 0; r < size; r++) {\n    for (let c = 0; c < size; c++) {\n      let square = model.board.grid[r][c];\n      if (model.board.grid[r][c].color === 'pink') {\n        if (r + 1 < model.board.grid.length && c + 1 < model.board.grid[r].length && model.board.grid[r + 1][c].color === 'pink' && model.board.grid[r][c + 1].color === 'pink') {\n          if (model.board.grid[r][c].color === 'white') {\n            if (r + 1 < model.board.grid.length && c + 1 < model.board.grid[r].length && model.board.grid[r + 1][c].color === 'white' && model.board.grid[r][c + 1].color === 'white') {\n              return false;\n            }\n          }\n        }\n      }\n    }\n  }\n  return true;\n}\nexport default class Model {\n  // info is going to be JSON-encoded puzzle\n\n  // 'which' is an integer 0..1..2 which selects configuration you can use.\n  constructor(which) {\n    this.config = configs[which];\n    this.size = Number(this.config.numColumns);\n    this.board = new Board(this.size);\n    this.numMoves = 0;\n    console.log(this.config);\n    for (let info of this.config.initial) {\n      console.log(info);\n      //info will be ... {\"color\" : \"red\", \"row\" : \"1\", \"column\" : \"D\"},\n      let row = Number(info.row) - 1;\n      let column = info.column.charCodeAt(0) - 'A'.charCodeAt(0);\n      this.board.grid[row][column].color = info.color;\n    }\n  }\n}","map":{"version":3,"names":["config_4x4","config_5x5","config_6x6","configs","Square","constructor","row","column","Board","size","grid","Array","from","r","c","isWon","model","board","square","color","length","Model","which","config","Number","numColumns","numMoves","console","log","info","initial","charCodeAt"],"sources":["/Users/emresunar/Documents/CS3733/IProj/starter/src/model/Model.js"],"sourcesContent":["import { config_4x4, config_5x5, config_6x6 } from \"./config\";\n\n// someone needs to know about these configurations. Perhaps we should!\nconst configs = [ config_5x5, config_4x4, config_6x6 ]\n\n\n// wouldn't it be useful to have a Square class?\nexport class Square {\n    constructor(row, column) {\n        this.row = row\n        this.column = column\n    }\n}\n\nexport class Board {\n    constructor (size) {\n        this.size = size\n\n        this.grid = Array.from(Array(size), () => new Array(size));\n\n        for (let r = 0; r < size; r++) {\n            for (let c = 0; c < size; c++) {\n                this.grid[r][c] = new Square(r,c)\n            }\n        }\n\n    // how you access a square by its [row][column] location\n        // this.grid[2][4]\n    }\n}\n    // a method that might be useful\n    export function isWon(model){\n        let size = model.board.grid.size; // Assuming \"this\" refers to the Model object\n    \n        for (let r = 0; r < size; r++) {\n            for (let c = 0; c < size; c++) {\n                let square = model.board.grid[r][c];\n                if (model.board.grid[r][c].color === 'pink') {\n                    if (\n                        r + 1 < model.board.grid.length &&\n                        c + 1 < model.board.grid[r].length &&\n                        model.board.grid[r + 1][c].color === 'pink' &&\n                        model.board.grid[r][c + 1].color === 'pink'\n                    ){\n                        if (model.board.grid[r][c].color === 'white') {\n                            if (\n                                r + 1 < model.board.grid.length &&\n                                c + 1 < model.board.grid[r].length &&\n                                model.board.grid[r + 1][c].color === 'white' &&\n                                model.board.grid[r][c + 1].color === 'white'\n                            ){return false;}}\n                    }\n                }\n            }\n        }\n            return true;\n    }\n\n\n\nexport default class Model {\n     // info is going to be JSON-encoded puzzle\n    \n    // 'which' is an integer 0..1..2 which selects configuration you can use.\n    constructor(which) {\n        this.config = configs[which]\n\n        this.size = Number(this.config.numColumns)\n        this.board = new Board(this.size)\n\n        this.numMoves = 0;\n\n        console.log(this.config)\n        for (let info of this.config.initial) {\n            console.log(info)\n            //info will be ... {\"color\" : \"red\", \"row\" : \"1\", \"column\" : \"D\"},\n            let row = Number (info.row) - 1\n            let column = info.column.charCodeAt(0) - 'A'.charCodeAt(0)\n            this.board.grid[row][column].color = info.color\n        }\n    }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}